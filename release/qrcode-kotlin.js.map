{"version":3,"file":"qrcode-kotlin.js","mappings":"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ME,UAAAJ,GAAA,MAC8B,aAAAK,cAAc,WACZ,oBACM,oBACT,oBACC,oBACP,cAAAX,EAnBzD,C,cCwB4B,mBACD,wBACG,2BACT,oBACM,yBACL,mBACA,mBACC,kBACD,qBACU,2BACX,oBACO,0BACN,oBACK,yBACA,0BACA,yBACD,wBACJ,kBACU,+BACP,oBACD,sBACH,oBACK,yBACA,yBACM,8BACN,wBACA,wBACC,0BACA,yBACE,2BACI,gCACL,wBACA,0BACH,uBACG,0BACG,6BACC,+BACA,+BACA,+BACD,8BACH,0BACF,sBACI,6BACL,uBACA,uBACG,2BACD,yBACE,wBACA,4BACL,oBACE,wBACE,yBACP,iBACM,yBACN,mBACA,mBACC,qBACO,2BACH,uBACD,qBACE,yBACJ,sBACD,eACA,mBACG,uBACM,0BACJ,yBACG,yBACH,yBACC,0BACD,yBACa,qCACb,yBACA,yBACC,0BACD,uBACE,yBACG,+BACD,6BACE,+BACA,+BACA,+BACJ,sBACR,oBACM,0BACL,mBACE,oBACD,qBACY,kCACP,2BACE,4BACA,4BACG,gCACC,gCACE,mCACH,gCACC,gCACJ,6BACH,wBACA,sBACF,oBACI,wBACR,oBACI,sBACH,oBACK,yBACJ,mBACI,uBACJ,qBACS,8BACL,yBACI,6BACC,8BACJ,uBACD,sBACN,mBACA,iBACA,mBACO,0BACL,qBACQ,8BACX,gBACO,yBACA,0BACE,2BACN,oBACK,yBACF,yBACA,qBACH,qBACA,qBACE,uBACE,yBACA,yBACA,yBACN,gBACQ,4BACF,0BACP,kBACC,oBACG,sBACD,mBACG,yBACH,qBACD,mBACA,cACM,yBACL,iBACM,0BArL7B,C,mCCEIY,EACAC,G,SAQgkC,S,WAA6oM,E,EAT7sO,YACA,WAJJ,C,YCAIC,EACAC,EACAC,EACAC,G,SA4B+lN,E,WA5BvkN,EAHxB,4BACA,0BACA,uBACA,gBAEqC,YAAAC,QAAQ,KAAAJ,sBACV,YAAAI,QAAQ,KAAAH,mBAV/C,C,6BCU6B,aAuBrB,KAAA1J,OAAS,eAAS,WAClB,KAAA8J,aA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I,GAAI,K,GAA4B,mBAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,EAAG,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,EAAG,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,EAAG,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,GAAI,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,GAAI,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,GAAI,IAAK,M,GAA6B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,kBAAG,IAAK,IAAK,GAAI,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,EAAG,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,mBAAI,IAAK,IAAK,EAAG,IAAK,M,GAA6B,mBAAI,GAAI,GAAI,GAAI,GAAI,K,GAA4B,m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","sources":["webpack://qrcodeKotlin/webpack/universalModuleDefinition","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/js/math.polyfills.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/ArrayBuffer.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/js.arrays/fill.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/math.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/color/QRCodeColorFunction.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/core/builtins/native/kotlin/Number.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/NumbersJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collectionJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Collections.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/kotlinHacks.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/builtins/Library.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Arrays.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sets.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayFunctions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Preconditions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/src/generated/_ArraysJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashMap.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/typeCheckUtils.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/runtimeForStdLib.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/CharacterCodingExceptionJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/charJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringNumberConversions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/src/generated/_DigitChars.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Standard.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/CharCode.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Collections.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/stringJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/text/utf8Encoding.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/src/generated/_ComparisonsJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Ranges.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/Ranges.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/builtins/Char.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/builtins/Enum.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/BitMask.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/arrays.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/bitUtils.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/charSequenceJs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/numberConversion.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/unsigned/src/kotlin/UShort.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/compareTo.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/coreRuntime.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/hacks.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/long.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/longjs.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/metadataUtils.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/runtime/rangeTo.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/js-ir/src/kotlin/exceptions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractCollection.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractList.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractSet.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/PrimitiveIterators.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/internal/progressionUtil.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/PrimitiveRanges.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/ProgressionIterators.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/Progressions.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Appendable.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/QRCode.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/QRCodeBuilder.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/color/Colors.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/color/DefaultColorFunction.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/color/LinearGradientColorFunction.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/BitBuffer.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/Polynomial.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/QRCodeSetup.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/QRCodeSquare.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/QRData.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/QRMath.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/QRUtil.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/internals/RSBlock.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/raw/QRCodeEnums.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/raw/QRCodeProcessor.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/render/QRCodeGraphicsFactory.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/shape/CircleShapeFunction.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/shape/DefaultShapeFunction.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/shape/RoundSquaresShapeFunction.kt","webpack://qrcodeKotlin/../../../../src/jsMain/kotlin/qrcode/render/QRCodeGraphics.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/HashCode.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Strings.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Strings.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://qrcodeKotlin/../../../../compileSync/js/main/productionExecutable/kotlin/src/jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://qrcodeKotlin/../../../../src/commonMain/kotlin/qrcode/shape/QRCodeShapeFunction.kt","webpack://qrcodeKotlin/webpack/bootstrap","webpack://qrcodeKotlin/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"qrcodeKotlin\"] = factory();\n\telse\n\t\troot[\"qrcodeKotlin\"] = factory();\n})(this, () => {\nreturn ",null,null,null,null,"package qrcode.color\n\nimport qrcode.QRCode\nimport qrcode.internals.QRCodeSquare\nimport qrcode.internals.QRCodeSquareType.MARGIN\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * A function that selects a color for a give square. The default implementation chooses between [fg], [bg] and [margin]\n * given what should be rendered.\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ninterface QRCodeColorFunction {\n    fun colorFn(square: QRCodeSquare, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int =\n        when (square.squareInfo.type) {\n            MARGIN -> margin(square.row, square.col, qrCode, qrCodeGraphics)\n            else -> when (square.dark) {\n                true -> fg(square.row, square.col, qrCode, qrCodeGraphics)\n                else -> bg(square.row, square.col, qrCode, qrCodeGraphics)\n            }\n        }\n\n    /**\n     * Called before rendering starts, to setup something if needed\n     */\n    fun beforeRender(qrCode: QRCode, qrCodeGraphics: QRCodeGraphics) {\n        // Do nothing\n    }\n\n    /**\n     * What is the foreground color\n     */\n    fun fg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int\n\n    /**\n     * What is the background color\n     */\n    fun bg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int\n\n    /**\n     * What is the margin color. Defaults to [bg]\n     */\n    fun margin(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = bg(row, col, qrCode, qrCodeGraphics)\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package qrcode\n\nimport qrcode.QRCode.Companion.ofCircles\nimport qrcode.QRCode.Companion.ofRoundedSquares\nimport qrcode.QRCode.Companion.ofSquares\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.CIRCLE\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.CUSTOM\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.ROUNDED_SQUARE\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.SQUARE\nimport qrcode.color.DefaultColorFunction\nimport qrcode.color.QRCodeColorFunction\nimport qrcode.internals.QRCodeSquareType.POSITION_ADJUST\nimport qrcode.internals.QRCodeSquareType.POSITION_PROBE\nimport qrcode.raw.ErrorCorrectionLevel\nimport qrcode.raw.QRCodeProcessor\nimport qrcode.raw.QRCodeProcessor.Companion.DEFAULT_CELL_SIZE\nimport qrcode.raw.QRCodeRawData\nimport qrcode.render.QRCodeGraphics\nimport qrcode.render.QRCodeGraphicsFactory\nimport qrcode.shape.CircleShapeFunction\nimport qrcode.shape.DefaultShapeFunction\nimport qrcode.shape.QRCodeShapeFunction\nimport qrcode.shape.RoundSquaresShapeFunction\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\nimport kotlin.jvm.JvmStatic\n\n/**\n * A fun class to easily create some of the more fancy QRCodes people come up with these days.\n *\n * It gets a [QRCodeProcessor] on the constructor and builds a render function on top of it.\n *\n * It includes things like:\n *\n * - A QR Code with a logo at the center\n * - A QR Code with dots instead of squares\n * - Colorful QR Codes\n *\n * If you have a suggestion for a nice QR Code style, feel free to open a PR, or an Issue with your suggestion :)\n *\n * @see QRCodeBuilder\n * @see ofSquares\n * @see ofCircles\n * @see ofRoundedSquares\n *\n * @author Rafael Lins - g0dkar\n *\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\", \"MemberVisibilityCanBePrivate\")\nclass QRCode @JvmOverloads constructor(\n    val data: String,\n    val squareSize: Int = DEFAULT_SQUARE_SIZE,\n    val colorFn: QRCodeColorFunction = DefaultColorFunction(),\n    val shapeFn: QRCodeShapeFunction = DefaultShapeFunction(squareSize),\n    var graphicsFactory: QRCodeGraphicsFactory = QRCodeGraphicsFactory(),\n    private val doBefore: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN,\n    private val doAfter: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN,\n) {\n    companion object {\n        internal val EMPTY_FN: QRCode.(QRCodeGraphics) -> Unit = { }\n\n        /** Default value of [squareSize]. */\n        const val DEFAULT_SQUARE_SIZE = DEFAULT_CELL_SIZE\n\n        /**\n         * Creates a new [QRCodeBuilder] to build a Fancy QRCode which uses squares as the base shape (this is the default)\n         *\n         * @see DefaultShapeFunction\n         */\n        @JvmStatic\n        fun ofSquares(): QRCodeBuilder = QRCodeBuilder(SQUARE)\n\n        /**\n         * Creates a new [QRCodeBuilder] to build a Fancy QRCode which uses circles as the base shape.\n         *\n         * This one was based on an Apple Music QRCode.\n         *\n         * @see CircleShapeFunction\n         */\n        @JvmStatic\n        fun ofCircles(): QRCodeBuilder = QRCodeBuilder(CIRCLE)\n\n        /**\n         * Creates a new [QRCodeBuilder] to build a Fancy QRCode which uses rounded squares as the base shape.\n         *\n         * @see RoundSquaresShapeFunction\n         */\n        @JvmStatic\n        fun ofRoundedSquares(): QRCodeBuilder = QRCodeBuilder(ROUNDED_SQUARE)\n\n        /**\n         * Creates a new [QRCodeBuilder] to build a QRCode which uses a custom shape function.\n         *\n         * @see QRCodeShapeFunction\n         * @see DefaultShapeFunction\n         */\n        @JvmStatic\n        fun ofCustomShape(customShapeFunction: QRCodeShapeFunction): QRCodeBuilder = QRCodeBuilder(CUSTOM, customShapeFunction)\n    }\n\n    /** The underlying [QRCodeProcessor] object that'll do all calculations */\n    val qrCodeProcessor: QRCodeProcessor =\n        QRCodeProcessor(data, ErrorCorrectionLevel.H, graphicsFactory = graphicsFactory)\n\n    /** Computed type number for the given [data] parameter */\n    val typeNum = QRCodeProcessor.typeForDataAndECL(data, ErrorCorrectionLevel.H).coerceAtLeast(6)\n\n    /** Raw QRCode data computed by [QRCodeProcessor] */\n    val rawData = qrCodeProcessor.encode(typeNum)\n\n    /** Calculated size of the whole QRCode (the final image will be a square of `computedSize` by `computedSize`) */\n    val computedSize = qrCodeProcessor.computeImageSize(squareSize, squareSize, rawData)\n\n    private fun draw(rawData: QRCodeRawData, canvas: QRCodeGraphics): QRCodeGraphics =\n        qrCodeProcessor.renderShaded(\n            cellSize = squareSize,\n            margin = squareSize,\n            rawData = rawData,\n            qrCodeGraphics = canvas,\n        ) { currentSquare, currentCanvas ->\n            val actualSquare = currentSquare.parent ?: currentSquare\n\n            if (!actualSquare.rendered) {\n                when (currentSquare.squareInfo.type) {\n                    POSITION_PROBE, POSITION_ADJUST -> shapeFn.renderControlSquare(\n                        colorFn,\n                        actualSquare,\n                        currentCanvas,\n                        canvas,\n                        this,\n                    )\n\n                    else -> shapeFn.renderSquare(colorFn, currentSquare, currentCanvas, canvas, this)\n                }\n\n                actualSquare.rendered = true\n            }\n        }\n\n    /** Executes all the drawing of the QRCode and returns the [QRCodeGraphics] of the complete QRCode. */\n    fun renderToGraphics(): QRCodeGraphics {\n        val qrCodeGraphics = graphicsFactory.newGraphicsSquare(computedSize)\n        colorFn.beforeRender(this, qrCodeGraphics)\n        shapeFn.beforeRender(this, qrCodeGraphics)\n        doBefore(qrCodeGraphics)\n        return draw(rawData, qrCodeGraphics).also { doAfter(it) }\n    }\n\n    /** Calls [renderToGraphics] and then returns the bytes of a [format] (default = PNG) render of the QRCode. */\n    @JvmOverloads\n    fun render(format: String = \"PNG\"): ByteArray {\n        return renderToGraphics().getBytes(format)\n    }\n}\n","package qrcode\n\nimport qrcode.QRCode.Companion.EMPTY_FN\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.CIRCLE\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.CUSTOM\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.ROUNDED_SQUARE\nimport qrcode.QRCodeBuilder.QRCodeShapesEnum.SQUARE\nimport qrcode.color.Colors\nimport qrcode.color.DefaultColorFunction\nimport qrcode.color.LinearGradientColorFunction\nimport qrcode.color.QRCodeColorFunction\nimport qrcode.internals.QRMath\nimport qrcode.raw.QRCodeProcessor\nimport qrcode.render.QRCodeGraphics\nimport qrcode.render.QRCodeGraphicsFactory\nimport qrcode.shape.CircleShapeFunction\nimport qrcode.shape.DefaultShapeFunction\nimport qrcode.shape.QRCodeShapeFunction\nimport qrcode.shape.RoundSquaresShapeFunction\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\n\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nclass QRCodeBuilder @JvmOverloads constructor(\n    private val shape: QRCodeShapesEnum,\n    private var customShapeFunction: QRCodeShapeFunction? = null,\n) {\n    private var customColorFunction: QRCodeColorFunction? = null\n\n    private var squareSize: Int = QRCodeProcessor.DEFAULT_CELL_SIZE\n    private var color: Int = Colors.BLACK\n    private var endColor: Int? = null\n    private var vertical: Boolean = true\n    private var background: Int = Colors.WHITE\n    private var innerSpace: Int = innerSpace()\n    private var radiusInPixels: Int = RoundSquaresShapeFunction.defaultRadius(squareSize)\n    private var drawLogoAction: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN\n    private var drawLogoBeforeAction: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN\n    private var userDoAfter: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN\n    private var userDoBefore: QRCode.(QRCodeGraphics) -> Unit = EMPTY_FN\n    private var graphicsFactory: QRCodeGraphicsFactory = QRCodeGraphicsFactory()\n\n    enum class QRCodeShapesEnum {\n        SQUARE,\n        CIRCLE,\n        ROUNDED_SQUARE,\n        CUSTOM\n    }\n\n    private fun innerSpace() =\n        when (shape) {\n            SQUARE -> 1\n            CIRCLE -> CircleShapeFunction.defaultInnerSpace(squareSize)\n            ROUNDED_SQUARE -> RoundSquaresShapeFunction.defaultInnerSpace(squareSize)\n            CUSTOM -> 0\n        }.takeIf { it < squareSize } ?: 0\n\n    /** Size of each individual space in the QRCode (each cell). */\n    fun withSize(size: Int): QRCodeBuilder {\n        squareSize = size.coerceAtLeast(1)\n        return withInnerSpacing(innerSpace())\n    }\n\n    /**\n     * Color of the cells of the QRCode.\n     *\n     * _Expected to be the Integer that represents an RGBA color. In short, use the [Colors] helpers ;)_\n     *\n     * @see Colors\n     */\n    fun withColor(color: Int): QRCodeBuilder {\n        this.color = color\n        return this\n    }\n\n    /**\n     * Background color of the QRCode.\n     *\n     * _Expected to be the Integer that represents an RGBA color. In short, use the [Colors] helpers ;)_\n     *\n     * @see Colors\n     */\n    fun withBackgroundColor(bgColor: Int): QRCodeBuilder {\n        background = bgColor\n        return this\n    }\n\n    /**\n     * Uses a [LinearGradientColorFunction] to choose colors for the QRCode.\n     *\n     * By default, the gradient will be a vertical one (top-to-bottom)\n     *\n     * If [endColor] is `null`, a [DefaultColorFunction] will be used instead.\n     *\n     * @see Colors\n     */\n    @JvmOverloads\n    fun withGradientColor(startColor: Int, endColor: Int?, vertical: Boolean = true): QRCodeBuilder {\n        color = startColor\n        this.endColor = endColor\n        this.vertical = vertical\n        return this\n    }\n\n    /**\n     * Radius of the edges of the Rounded Squares. Only applies for Rounded Squares. If set to a negative number,\n     * the default radius will be used.\n     */\n    fun withRadius(radius: Int): QRCodeBuilder {\n        radiusInPixels = radius.takeIf { it >= 0 } ?: RoundSquaresShapeFunction.defaultRadius(squareSize)\n        return this\n    }\n\n    /** How much space there should be around each QRCode Cell. Defaults to 1 pixel, or 0 if a custom shape function is being used. */\n    @JvmOverloads\n    fun withInnerSpacing(innerSpacing: Int? = null): QRCodeBuilder {\n        innerSpace = innerSpacing?.takeIf { it >= 0 } ?: innerSpace()\n        return this\n    }\n\n    /**\n     * Adds an image on top of the QRCode, at the center of it.\n     *\n     * If [clearLogoArea] is `false` the cells behind the logo will be drawn as normal.\n     *\n     */\n    @JvmOverloads\n    fun withLogo(logo: ByteArray, width: Int, height: Int, clearLogoArea: Boolean = true): QRCodeBuilder {\n        if (clearLogoArea) {\n            drawLogoBeforeAction = {\n                val logoX = (computedSize - width) / 2\n                val logoY = (computedSize - height) / 2\n\n                rawData.forEach { row ->\n                    row.forEach { cell ->\n                        val cellX = cell.absoluteX(squareSize) + squareSize\n                        val cellY = cell.absoluteY(squareSize) + squareSize\n\n                        cell.rendered = !QRMath.rectsIntersect(\n                            logoX,\n                            logoY,\n                            width,\n                            height,\n                            cellX,\n                            cellY,\n                            squareSize,\n                            squareSize,\n                        )\n                    }\n                }\n            }\n        } else {\n            drawLogoBeforeAction = EMPTY_FN\n        }\n\n        drawLogoAction = { canvas ->\n            val logoX = (computedSize - width) / 2\n            val logoY = (computedSize - height) / 2\n\n            canvas.drawImage(logo, logoX, logoY)\n        }\n\n        return this\n    }\n\n    /** Run a piece of code after the rendering is done. */\n    fun withAfterRenderAction(action: QRCode.(QRCodeGraphics) -> Unit): QRCodeBuilder {\n        userDoAfter = action\n        return this\n    }\n\n    /** Run a piece of code before the rendering is done. */\n    fun withBeforeRenderAction(action: QRCode.(QRCodeGraphics) -> Unit): QRCodeBuilder {\n        userDoBefore = action\n        return this\n    }\n\n    /** Use a custom [QRCodeGraphicsFactory] instead of the default. */\n    fun withGraphicsFactory(factory: QRCodeGraphicsFactory): QRCodeBuilder {\n        graphicsFactory = factory\n        return this\n    }\n\n    /**\n     * Sets the [QRCode.colorFn] value to a custom one. If set, the builder will ignore [color] and [background].\n     *\n     * Default is `null`, meaning a [DefaultColorFunction] will be created from the [color] and [background] values.\n     *\n     * @see QRCodeColorFunction\n     * @see DefaultColorFunction\n     */\n    fun withCustomColorFunction(colorFn: QRCodeColorFunction?): QRCodeBuilder {\n        this.customColorFunction = colorFn\n        return this\n    }\n\n    /**\n     * Sets the [QRCode.shapeFn] value to a custom one. If set, the builder will ignore the [shape] parameter.\n     *\n     * Default is `null`, meaning a [QRCodeShapeFunction] will be created for the selected [shape].\n     *\n     * If [shape] is [CUSTOM] but [customShapeFunction] is not set, a [DefaultShapeFunction] will be used.\n     *\n     * @see QRCodeShapeFunction\n     * @see DefaultShapeFunction\n     * @see RoundSquaresShapeFunction\n     * @see CircleShapeFunction\n     */\n    fun withCustomShapeFunction(shapeFn: QRCodeShapeFunction?): QRCodeBuilder {\n        this.customShapeFunction = shapeFn\n        return this\n    }\n\n    private val beforeFn: QRCode.(QRCodeGraphics) -> Unit\n        get() = { canvas ->\n            drawLogoBeforeAction(canvas)\n            userDoBefore(canvas)\n        }\n\n    private val afterFn: QRCode.(QRCodeGraphics) -> Unit\n        get() = { canvas ->\n            drawLogoAction(canvas)\n            userDoAfter(canvas)\n        }\n\n    private val colorFunction: QRCodeColorFunction\n        get() = when (endColor) {\n            null -> customColorFunction ?: DefaultColorFunction(foreground = color, background)\n            else -> customColorFunction ?: LinearGradientColorFunction(\n                startForegroundColor = color,\n                endForegroundColor = endColor!!,\n                background,\n            )\n        }\n\n    private val shapeFunction: QRCodeShapeFunction\n        get() = customShapeFunction ?: when (shape) {\n            SQUARE, CUSTOM -> DefaultShapeFunction(squareSize, innerSpace = innerSpace)\n            CIRCLE -> CircleShapeFunction(squareSize, innerSpace = innerSpace)\n            ROUNDED_SQUARE -> RoundSquaresShapeFunction(squareSize, radiusInPixels, innerSpace = innerSpace)\n        }\n\n    /**\n     * Builds a [QRCode] instance ready to use.\n     *\n     * @see QRCode.render\n     * @see QRCode.renderToGraphics\n     */\n    fun build(data: String) =\n        QRCode(\n            data,\n            squareSize,\n            colorFunction,\n            shapeFunction,\n            graphicsFactory,\n            beforeFn,\n            afterFn,\n        )\n}\n","package qrcode.color\n\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Just a lot of colors to use when drawing :)\n *\n * The constants are all the CSS colors, taken from https://www.w3schools.com/colors/colors_names.asp\n *\n * @author Rafael Lins - g0dkar\n * @see css\n * @see withAlpha\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"MemberVisibilityCanBePrivate\", \"unused\")\nobject Colors {\n    /** Very simple function to turn \"#cc0000\" into a color. */\n    fun css(str: String): Int =\n        str.substring(1..6).toInt(16) or 0xFF000000.toInt()\n\n    /** Builds an RGBA color value from its numerical components. All values must be between `0..255`. */\n    fun rgba(r: Int, g: Int, b: Int, a: Int = 255): Int =\n        a.coerceIn(0..255) and 0xFF shl 24 or\n            (r.coerceIn(0..255) and 0xFF shl 16) or\n            (g.coerceIn(0..255) and 0xFF shl 8) or\n            (b.coerceIn(0..255) and 0xFF shl 0)\n\n    /** Compute the R, G, B and Alpha components of a color. All values between `0..255`. */\n    fun getRGBA(color: Int): IntArray =\n        intArrayOf(\n            (color shr 16) and 0xFF,\n            (color shr 8) and 0xFF,\n            (color shr 0) and 0xFF,\n            (color shr 24) and 0xFF\n        )\n\n    /**\n     * Returns the especified color with an added alpha channel. That means a transparent/opaque color.\n     *\n     * `alpha` ranges from 0 (completely transparent) to 255 (completely visible). Values outside this\n     * range are [coerced][coerceIn] into it.\n     */\n    fun withAlpha(color: Int, alpha: Int): Int =\n        (alpha.coerceIn(0..255) shl 24) + (color and 0xFFFFFF)\n\n    const val TRANSPARENT = 0x00000000\n    const val ALICE_BLUE = 0xFFF0F8FF.toInt()\n    const val ANTIQUE_WHITE = 0xFFFAEBD7.toInt()\n    const val AQUA = 0xFF00FFFF.toInt()\n    const val AQUAMARINE = 0xFF7FFFD4.toInt()\n    const val AZURE = 0xFFF0FFFF.toInt()\n    const val BEIGE = 0xFFF5F5DC.toInt()\n    const val BISQUE = 0xFFFFE4C4.toInt()\n    const val BLACK = 0xFF000000.toInt()\n    const val BLANCHED_ALMOND = 0xFFFFEBCD.toInt()\n    const val BLUE = 0xFF0000FF.toInt()\n    const val BLUE_VIOLET = 0xFF8A2BE2.toInt()\n    const val BROWN = 0xFFA52A2A.toInt()\n    const val BURLY_WOOD = 0xFFDEB887.toInt()\n    const val CADET_BLUE = 0xFF5F9EA0.toInt()\n    const val CHARTREUSE = 0xFF7FFF00.toInt()\n    const val CHOCOLATE = 0xFFD2691E.toInt()\n    const val CORAL = 0xFFFF7F50.toInt()\n    const val CORNFLOWER_BLUE = 0xFF6495ED.toInt()\n    const val CORNSILK = 0xFFFFF8DC.toInt()\n    const val CRIMSON = 0xFFDC143C.toInt()\n    const val CYAN = 0xFF00FFFF.toInt()\n    const val DARK_BLUE = 0xFF00008B.toInt()\n    const val DARK_CYAN = 0xFF008B8B.toInt()\n    const val DARK_GOLDEN_ROD = 0xFFB8860B.toInt()\n    const val DARK_GRAY = 0xFFA9A9A9.toInt()\n    const val DARK_GREY = 0xFFA9A9A9.toInt()\n    const val DARK_GREEN = 0xFF006400.toInt()\n    const val DARK_KHAKI = 0xFFBDB76B.toInt()\n    const val DARK_MAGENTA = 0xFF8B008B.toInt()\n    const val DARK_OLIVE_GREEN = 0xFF556B2F.toInt()\n    const val DARK_ORANGE = 0xFFFF8C00.toInt()\n    const val DARK_ORCHID = 0xFF9932CC.toInt()\n    const val DARK_RED = 0xFF8B0000.toInt()\n    const val DARK_SALMON = 0xFFE9967A.toInt()\n    const val DARK_SEA_GREEN = 0xFF8FBC8F.toInt()\n    const val DARK_SLATE_BLUE = 0xFF483D8B.toInt()\n    const val DARK_SLATE_GRAY = 0xFF2F4F4F.toInt()\n    const val DARK_SLATE_GREY = 0xFF2F4F4F.toInt()\n    const val DARK_TURQUOISE = 0xFF00CED1.toInt()\n    const val DARK_VIOLET = 0xFF9400D3.toInt()\n    const val DEEP_PINK = 0xFFFF1493.toInt()\n    const val DEEP_SKY_BLUE = 0xFF00BFFF.toInt()\n    const val DIM_GRAY = 0xFF696969.toInt()\n    const val DIM_GREY = 0xFF696969.toInt()\n    const val DODGER_BLUE = 0xFF1E90FF.toInt()\n    const val FIRE_BRICK = 0xFFB22222.toInt()\n    const val FLORAL_WHITE = 0xFFFFFAF0.toInt()\n    const val FOREST_GREEN = 0xFF228B22.toInt()\n    const val FUCHSIA = 0xFFFF00FF.toInt()\n    const val GAINSBORO = 0xFFDCDCDC.toInt()\n    const val GHOST_WHITE = 0xFFF8F8FF.toInt()\n    const val GOLD = 0xFFFFD700.toInt()\n    const val GOLDEN_ROD = 0xFFDAA520.toInt()\n    const val GRAY = 0xFF808080.toInt()\n    const val GREY = 0xFF808080.toInt()\n    const val GREEN = 0xFF008000.toInt()\n    const val GREEN_YELLOW = 0xFFADFF2F.toInt()\n    const val HONEY_DEW = 0xFFF0FFF0.toInt()\n    const val HOT_PINK = 0xFFFF69B4.toInt()\n    const val INDIAN_RED = 0xFFCD5C5C.toInt()\n    const val INDIGO = 0xFF4B0082.toInt()\n    const val IVORY = 0xFFFFFFF0.toInt()\n    const val KHAKI = 0xFFF0E68C.toInt()\n    const val LAVENDER = 0xFFE6E6FA.toInt()\n    const val LAVENDER_BLUSH = 0xFFFFF0F5.toInt()\n    const val LAWN_GREEN = 0xFF7CFC00.toInt()\n    const val LEMON_CHIFFON = 0xFFFFFACD.toInt()\n    const val LIGHT_BLUE = 0xFFADD8E6.toInt()\n    const val LIGHT_CORAL = 0xFFF08080.toInt()\n    const val LIGHT_CYAN = 0xFFE0FFFF.toInt()\n    const val LIGHT_GOLDEN_ROD_YELLOW = 0xFFFAFAD2.toInt()\n    const val LIGHT_GRAY = 0xFFD3D3D3.toInt()\n    const val LIGHT_GREY = 0xFFD3D3D3.toInt()\n    const val LIGHT_GREEN = 0xFF90EE90.toInt()\n    const val LIGHT_PINK = 0xFFFFB6C1.toInt()\n    const val LIGHT_SALMON = 0xFFFFA07A.toInt()\n    const val LIGHT_SEA_GREEN = 0xFF20B2AA.toInt()\n    const val LIGHT_SKY_BLUE = 0xFF87CEFA.toInt()\n    const val LIGHT_SLATE_GRAY = 0xFF778899.toInt()\n    const val LIGHT_SLATE_GREY = 0xFF778899.toInt()\n    const val LIGHT_STEEL_BLUE = 0xFFB0C4DE.toInt()\n    const val LIGHT_YELLOW = 0xFFFFFFE0.toInt()\n    const val LIME = 0xFF00FF00.toInt()\n    const val LIME_GREEN = 0xFF32CD32.toInt()\n    const val LINEN = 0xFFFAF0E6.toInt()\n    const val MAGENTA = 0xFFFF00FF.toInt()\n    const val MAROON = 0xFF800000.toInt()\n    const val MEDIUM_AQUA_MARINE = 0xFF66CDAA.toInt()\n    const val MEDIUM_BLUE = 0xFF0000CD.toInt()\n    const val MEDIUM_ORCHID = 0xFFBA55D3.toInt()\n    const val MEDIUM_PURPLE = 0xFF9370DB.toInt()\n    const val MEDIUM_SEA_GREEN = 0xFF3CB371.toInt()\n    const val MEDIUM_SLATE_BLUE = 0xFF7B68EE.toInt()\n    const val MEDIUM_SPRING_GREEN = 0xFF00FA9A.toInt()\n    const val MEDIUM_TURQUOISE = 0xFF48D1CC.toInt()\n    const val MEDIUM_VIOLET_RED = 0xFFC71585.toInt()\n    const val MIDNIGHT_BLUE = 0xFF191970.toInt()\n    const val MINT_CREAM = 0xFFF5FFFA.toInt()\n    const val MISTY_ROSE = 0xFFFFE4E1.toInt()\n    const val MOCCASIN = 0xFFFFE4B5.toInt()\n    const val NAVAJO_WHITE = 0xFFFFDEAD.toInt()\n    const val NAVY = 0xFF000080.toInt()\n    const val OLD_LACE = 0xFFFDF5E6.toInt()\n    const val OLIVE = 0xFF808000.toInt()\n    const val OLIVE_DRAB = 0xFF6B8E23.toInt()\n    const val ORANGE = 0xFFFFA500.toInt()\n    const val ORANGE_RED = 0xFFFF4500.toInt()\n    const val ORCHID = 0xFFDA70D6.toInt()\n    const val PALE_GOLDEN_ROD = 0xFFEEE8AA.toInt()\n    const val PALE_GREEN = 0xFF98FB98.toInt()\n    const val PALE_TURQUOISE = 0xFFAFEEEE.toInt()\n    const val PALE_VIOLET_RED = 0xFFDB7093.toInt()\n    const val PAPAYA_WHIP = 0xFFFFEFD5.toInt()\n    const val PEACH_PUFF = 0xFFFFDAB9.toInt()\n    const val PERU = 0xFFCD853F.toInt()\n    const val PINK = 0xFFFFC0CB.toInt()\n    const val PLUM = 0xFFDDA0DD.toInt()\n    const val POWDER_BLUE = 0xFFB0E0E6.toInt()\n    const val PURPLE = 0xFF800080.toInt()\n    const val REBECCA_PURPLE = 0xFF663399.toInt()\n    const val RED = 0xFFFF0000.toInt()\n    const val ROSY_BROWN = 0xFFBC8F8F.toInt()\n    const val ROYAL_BLUE = 0xFF4169E1.toInt()\n    const val SADDLE_BROWN = 0xFF8B4513.toInt()\n    const val SALMON = 0xFFFA8072.toInt()\n    const val SANDY_BROWN = 0xFFF4A460.toInt()\n    const val SEA_GREEN = 0xFF2E8B57.toInt()\n    const val SEA_SHELL = 0xFFFFF5EE.toInt()\n    const val SIENNA = 0xFFA0522D.toInt()\n    const val SILVER = 0xFFC0C0C0.toInt()\n    const val SKY_BLUE = 0xFF87CEEB.toInt()\n    const val SLATE_BLUE = 0xFF6A5ACD.toInt()\n    const val SLATE_GRAY = 0xFF708090.toInt()\n    const val SLATE_GREY = 0xFF708090.toInt()\n    const val SNOW = 0xFFFFFAFA.toInt()\n    const val SPRING_GREEN = 0xFF00FF7F.toInt()\n    const val STEEL_BLUE = 0xFF4682B4.toInt()\n    const val TAN = 0xFFD2B48C.toInt()\n    const val TEAL = 0xFF008080.toInt()\n    const val THISTLE = 0xFFD8BFD8.toInt()\n    const val TOMATO = 0xFFFF6347.toInt()\n    const val TURQUOISE = 0xFF40E0D0.toInt()\n    const val VIOLET = 0xFFEE82EE.toInt()\n    const val WHEAT = 0xFFF5DEB3.toInt()\n    const val WHITE = 0xFFFFFFFF.toInt()\n    const val WHITE_SMOKE = 0xFFF5F5F5.toInt()\n    const val YELLOW = 0xFFFFFF00.toInt()\n    const val YELLOW_GREEN = 0xFF9ACD32.toInt()\n}\n","package qrcode.color\n\nimport qrcode.QRCode\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Default function for the QRCode cell color. Returns a color for the foreground (\"dark\") and another for the\n * background and margin.\n *\n * The default colors is [Colors.BLACK] for the foreground and [Colors.WHITE] for the background.\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nopen class DefaultColorFunction(\n    private val foreground: Int = Colors.BLACK,\n    private val background: Int = Colors.WHITE,\n) : QRCodeColorFunction {\n    override fun fg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = foreground\n\n    override fun bg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = background\n\n    override fun margin(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = background\n}\n","package qrcode.color\n\nimport qrcode.QRCode\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.roundToInt\n\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"MemberVisibilityCanBePrivate\")\nclass LinearGradientColorFunction @JvmOverloads constructor(\n    val startForegroundColor: Int,\n    val endForegroundColor: Int,\n    val backgroundColor: Int = Colors.WHITE,\n    var vertical: Boolean = true,\n) : QRCodeColorFunction {\n    private val startComponents = Colors.getRGBA(startForegroundColor)\n    private val endComponents = Colors.getRGBA(endForegroundColor)\n\n    override fun fg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int {\n        val pct: Double = if (vertical) {\n            row\n        } else {\n            col\n        } / qrCode.rawData.size.toDouble()\n\n        val r = startComponents[0] * (1 - pct) + endComponents[0] * pct\n        val g = startComponents[1] * (1 - pct) + endComponents[1] * pct\n        val b = startComponents[2] * (1 - pct) + endComponents[2] * pct\n\n        return Colors.rgba(\n            r.roundToInt().coerceIn(0..255),\n            g.roundToInt().coerceIn(0..255),\n            b.roundToInt().coerceIn(0..255),\n            255,\n        )\n    }\n\n    override fun bg(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = backgroundColor\n\n    override fun margin(row: Int, col: Int, qrCode: QRCode, qrCodeGraphics: QRCodeGraphics): Int = backgroundColor\n}\n","package qrcode.internals\n\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.js.JsName\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/BitBuffer.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ninternal class BitBuffer {\n    var buffer: IntArray\n        private set\n    var lengthInBits: Int\n        private set\n    private val increments = 32\n\n    private operator fun get(index: Int): Boolean =\n        buffer[index / 8] ushr 7 - index % 8 and 1 == 1\n\n    fun put(num: Int, length: Int) {\n        for (i in 0 until length) {\n            put(num ushr length - i - 1 and 1 == 1)\n        }\n    }\n\n    @JsName(\"putBit\")\n    fun put(bit: Boolean) {\n        if (lengthInBits == buffer.size * 8) {\n            buffer = buffer.copyOf(buffer.size + increments)\n        }\n        if (bit) {\n            buffer[lengthInBits / 8] = buffer[lengthInBits / 8] or (0x80 ushr lengthInBits % 8)\n        }\n        lengthInBits++\n    }\n\n    init {\n        buffer = IntArray(increments)\n        lengthInBits = 0\n    }\n\n    override fun toString(): String {\n        val buffer = StringBuilder()\n        for (i in 0 until lengthInBits) {\n            buffer.append(if (get(i)) '1' else '0')\n        }\n        return buffer.toString()\n    }\n}\n","package qrcode.internals\n\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport qrcode.internals.QRMath.gexp\nimport qrcode.internals.QRMath.glog\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/Polynomial.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal class Polynomial(num: IntArray, shift: Int = 0) {\n    val data: IntArray\n\n    init {\n        val offset = num.indexOfFirst { it != 0 }.coerceAtLeast(0)\n        this.data = IntArray(num.size - offset + shift) { 0 }\n        arraycopy(num, offset, this.data, 0, num.size - offset)\n    }\n\n    private fun arraycopy(from: IntArray, fromPos: Int, to: IntArray, toPos: Int, length: Int) {\n        for (i in 0 until length) {\n            to[toPos + i] = from[fromPos + i]\n        }\n    }\n\n    operator fun get(i: Int) = data[i]\n\n    fun len(): Int = data.size\n\n    fun multiply(other: Polynomial): Polynomial =\n        IntArray(len() + other.len() - 1) { 0 }\n            .let {\n                for (i in 0 until len()) {\n                    for (j in 0 until other.len()) {\n                        it[i + j] = it[i + j] xor gexp(glog(this[i]) + glog(other[j]))\n                    }\n                }\n\n                Polynomial(it)\n            }\n\n    fun mod(other: Polynomial): Polynomial =\n        if (len() - other.len() < 0) {\n            this\n        } else {\n            val ratio = glog(this[0]) - glog(other[0])\n            val result = data.copyOf()\n\n            other.data.forEachIndexed { i, it ->\n                result[i] = result[i] xor gexp(glog(it) + ratio)\n            }\n\n            Polynomial(result).mod(other)\n        }\n}\n","package qrcode.internals\n\nimport qrcode.internals.QRCodeRegion.BOTTOM_LEFT_CORNER\nimport qrcode.internals.QRCodeRegion.BOTTOM_MID\nimport qrcode.internals.QRCodeRegion.BOTTOM_RIGHT_CORNER\nimport qrcode.internals.QRCodeRegion.CENTER\nimport qrcode.internals.QRCodeRegion.LEFT_MID\nimport qrcode.internals.QRCodeRegion.MARGIN\nimport qrcode.internals.QRCodeRegion.RIGHT_MID\nimport qrcode.internals.QRCodeRegion.TOP_LEFT_CORNER\nimport qrcode.internals.QRCodeRegion.TOP_MID\nimport qrcode.internals.QRCodeRegion.TOP_RIGHT_CORNER\nimport qrcode.internals.QRCodeRegion.UNKNOWN\nimport qrcode.internals.QRCodeSquareType.POSITION_ADJUST\nimport qrcode.internals.QRCodeSquareType.POSITION_PROBE\nimport qrcode.internals.QRCodeSquareType.TIMING_PATTERN\nimport qrcode.raw.ErrorCorrectionLevel\nimport qrcode.raw.MaskPattern\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Object with helper methods and constants to setup stuff into the QRCode such as Position Probes and Timing Probes.\n *\n * @author Rafael Lins - g0dkar\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"MemberVisibilityCanBePrivate\")\ninternal object QRCodeSetup {\n    private const val DEFAULT_PROBE_SIZE = 7\n\n    fun setupTopLeftPositionProbePattern(\n        modules: Array<Array<QRCodeSquare?>>,\n        probeSize: Int = DEFAULT_PROBE_SIZE\n    ) {\n        setupPositionProbePattern(0, 0, modules, probeSize)\n    }\n\n    fun setupTopRightPositionProbePattern(\n        modules: Array<Array<QRCodeSquare?>>,\n        probeSize: Int = DEFAULT_PROBE_SIZE\n    ) {\n        setupPositionProbePattern(modules.size - probeSize, 0, modules, probeSize)\n    }\n\n    fun setupBottomLeftPositionProbePattern(\n        modules: Array<Array<QRCodeSquare?>>,\n        probeSize: Int = DEFAULT_PROBE_SIZE\n    ) {\n        setupPositionProbePattern(0, modules.size - probeSize, modules, probeSize)\n    }\n\n    fun setupPositionProbePattern(\n        rowOffset: Int,\n        colOffset: Int,\n        modules: Array<Array<QRCodeSquare?>>,\n        probeSize: Int = DEFAULT_PROBE_SIZE\n    ) {\n        val modulesSize = modules.size\n\n        val squareData = QRCodeSquare(\n            dark = false,\n            row = rowOffset,\n            col = colOffset,\n            rowSize = probeSize,\n            colSize = probeSize,\n            squareInfo = QRCodeSquareInfo(POSITION_PROBE, UNKNOWN),\n            moduleSize = modulesSize\n        )\n\n        for (row in -1..probeSize) {\n            for (col in -1..probeSize) {\n                if (!isInsideModules(row, rowOffset, col, colOffset, modulesSize)) {\n                    continue\n                }\n\n                val isDark = isTopBottomRowSquare(row, col, probeSize) ||\n                    isLeftRightColSquare(row, col, probeSize) ||\n                    isMidSquare(row, col, probeSize)\n\n                val region = findSquareRegion(row, col, probeSize)\n\n                modules[row + rowOffset][col + colOffset] = QRCodeSquare(\n                    dark = isDark,\n                    row = row + rowOffset,\n                    col = col + colOffset,\n                    squareInfo = QRCodeSquareInfo(POSITION_PROBE, region),\n                    moduleSize = modulesSize,\n                    parent = squareData\n                )\n            }\n        }\n    }\n\n    private fun isInsideModules(row: Int, rowOffset: Int, col: Int, colOffset: Int, modulesSize: Int) =\n        row + rowOffset in 0 until modulesSize && col + colOffset in 0 until modulesSize\n\n    private fun isTopBottomRowSquare(row: Int, col: Int, probeSize: Int) =\n        col in 0 until probeSize && (row == 0 || row == probeSize - 1)\n\n    private fun isLeftRightColSquare(row: Int, col: Int, probeSize: Int) =\n        row in 0 until probeSize && (col == 0 || col == probeSize - 1)\n\n    private fun isMidSquare(row: Int, col: Int, probeSize: Int) =\n        row in 2 until (probeSize - 2) && 2 <= col && col <= probeSize - 3\n\n    private fun findSquareRegion(row: Int, col: Int, probeSize: Int) =\n        when (row) {\n            0 -> when (col) { // 0 x ?: ┌───┐\n                0 -> TOP_LEFT_CORNER // 0 x 0: ┌\n                probeSize - 1 -> TOP_RIGHT_CORNER // 0 x MAX: ┐\n                probeSize -> MARGIN // Outside boundaries\n                else -> TOP_MID // between: ─\n            }\n\n            probeSize - 1 -> when (col) { // MAX x ?: └───┘\n                0 -> BOTTOM_LEFT_CORNER // MAX x 0: └\n                probeSize - 1 -> BOTTOM_RIGHT_CORNER // MAX x MAX: ┘\n                probeSize -> MARGIN // Outside boundaries\n                else -> BOTTOM_MID // between: ─\n            }\n\n            probeSize -> MARGIN // Outside boundaries\n\n            else -> when (col) { // Inside boundaries but not in any edge\n                0 -> LEFT_MID\n                probeSize - 1 -> RIGHT_MID\n                probeSize -> MARGIN // Outside boundaries\n                else -> CENTER // Middle/Center square\n            }\n        }\n\n    fun setupPositionAdjustPattern(type: Int, modules: Array<Array<QRCodeSquare?>>) {\n        val pos = QRUtil.getPatternPosition(type)\n\n        for (i in pos.indices) {\n            for (j in pos.indices) {\n                val row = pos[i]\n                val col = pos[j]\n\n                if (modules[row][col] != null) {\n                    continue\n                }\n\n                val squareData = QRCodeSquare(\n                    dark = false,\n                    row = row - 1,\n                    col = col - 1,\n                    rowSize = 5,\n                    colSize = 5,\n                    squareInfo = QRCodeSquareInfo(POSITION_ADJUST, UNKNOWN),\n                    moduleSize = modules.size\n                )\n\n                for (r in -2..2) {\n                    for (c in -2..2) {\n                        modules[row + r][col + c] = QRCodeSquare(\n                            dark = r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0,\n                            row = row + r,\n                            col = col + c,\n                            squareInfo = QRCodeSquareInfo(POSITION_ADJUST, UNKNOWN),\n                            moduleSize = modules.size,\n                            parent = squareData\n                        )\n                    }\n                }\n            }\n        }\n    }\n\n    fun setupTimingPattern(moduleCount: Int, modules: Array<Array<QRCodeSquare?>>) {\n        val squareData = QRCodeSquare(\n            dark = false,\n            row = 8,\n            col = 6,\n            rowSize = moduleCount - 8,\n            colSize = moduleCount - 8,\n            squareInfo = QRCodeSquareInfo(TIMING_PATTERN, UNKNOWN),\n            moduleSize = modules.size\n        )\n\n        for (r in 8 until moduleCount - 8) {\n            if (modules[r][6] != null) {\n                continue\n            }\n\n            modules[r][6] = QRCodeSquare(\n                dark = r % 2 == 0,\n                row = r,\n                col = 6,\n                squareInfo = QRCodeSquareInfo(TIMING_PATTERN, UNKNOWN),\n                moduleSize = modules.size,\n                parent = squareData\n            )\n        }\n\n        for (c in 8 until moduleCount - 8) {\n            if (modules[6][c] != null) {\n                continue\n            }\n\n            modules[6][c] = QRCodeSquare(\n                dark = c % 2 == 0,\n                row = 6,\n                col = c,\n                squareInfo = QRCodeSquareInfo(TIMING_PATTERN, UNKNOWN),\n                moduleSize = modules.size,\n                parent = squareData\n            )\n        }\n    }\n\n    fun setupTypeInfo(\n        errorCorrectionLevel: ErrorCorrectionLevel,\n        maskPattern: MaskPattern,\n        moduleCount: Int,\n        modules: Array<Array<QRCodeSquare?>>\n    ) {\n        val data = errorCorrectionLevel.value shl 3 or maskPattern.ordinal\n        val bits = QRUtil.getBCHTypeInfo(data)\n\n        for (i in 0..14) {\n            val mod = bits shr i and 1 == 1\n\n            if (i < 6) {\n                set(i, 8, mod, modules)\n            } else if (i < 8) {\n                set(i + 1, 8, mod, modules)\n            } else {\n                set(moduleCount - 15 + i, 8, mod, modules)\n            }\n        }\n\n        for (i in 0..14) {\n            val mod = bits shr i and 1 == 1\n\n            if (i < 8) {\n                set(8, moduleCount - i - 1, mod, modules)\n            } else if (i < 9) {\n                set(8, 15 - i, mod, modules)\n            } else {\n                set(8, 15 - i - 1, mod, modules)\n            }\n        }\n\n        set(moduleCount - 8, 8, true, modules)\n    }\n\n    fun setupTypeNumber(type: Int, moduleCount: Int, modules: Array<Array<QRCodeSquare?>>) {\n        val bits = QRUtil.getBCHTypeNumber(type)\n\n        for (i in 0..17) {\n            val mod = bits shr i and 1 == 1\n            set(i / 3, i % 3 + moduleCount - 8 - 3, mod, modules)\n        }\n\n        for (i in 0..17) {\n            val mod = bits shr i and 1 == 1\n            set(i % 3 + moduleCount - 8 - 3, i / 3, mod, modules)\n        }\n    }\n\n    fun applyMaskPattern(\n        data: IntArray,\n        maskPattern: MaskPattern,\n        moduleCount: Int,\n        modules: Array<Array<QRCodeSquare?>>\n    ) {\n        var inc = -1\n        var bitIndex = 7\n        var byteIndex = 0\n        var row = moduleCount - 1\n        var col = moduleCount - 1\n\n        while (col > 0) {\n            if (col == 6) {\n                col--\n            }\n\n            while (true) {\n                for (c in 0..1) {\n                    if (modules[row][col - c] == null) {\n                        var dark = false\n\n                        if (byteIndex < data.size) {\n                            dark = (data[byteIndex] ushr bitIndex) and 1 == 1\n                        }\n\n                        val mask = QRUtil.getMask(maskPattern, row, col - c)\n                        if (mask) {\n                            dark = !dark\n                        }\n\n                        set(row, col - c, dark, modules)\n\n                        bitIndex--\n                        if (bitIndex == -1) {\n                            byteIndex++\n                            bitIndex = 7\n                        }\n                    }\n                }\n\n                row += inc\n                if (row < 0 || moduleCount <= row) {\n                    row -= inc\n                    inc = -inc\n                    break\n                }\n            }\n\n            col -= 2\n        }\n    }\n\n    private fun set(row: Int, col: Int, value: Boolean, modules: Array<Array<QRCodeSquare?>>, parent: QRCodeSquare? = null) {\n        val qrCodeSquare = modules[row][col]\n\n        if (qrCodeSquare != null) {\n            qrCodeSquare.dark = value\n        } else {\n            modules[row][col] = QRCodeSquare(\n                dark = value,\n                row = row,\n                col = col,\n                moduleSize = modules.size,\n                parent = parent\n            )\n        }\n    }\n}\n","package qrcode.internals\n\nimport qrcode.internals.QRCodeRegion.BOTTOM_LEFT_CORNER\nimport qrcode.internals.QRCodeRegion.BOTTOM_RIGHT_CORNER\nimport qrcode.internals.QRCodeRegion.TOP_LEFT_CORNER\nimport qrcode.internals.QRCodeRegion.TOP_RIGHT_CORNER\nimport qrcode.internals.QRCodeRegion.UNKNOWN\nimport qrcode.internals.QRCodeSquareType.DEFAULT\nimport qrcode.internals.QRCodeSquareType.MARGIN\nimport qrcode.raw.QRCodeProcessor\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\n\n/**\n * Represents a single QRCode square unit. It has information about its \"color\" (either dark or bright),\n * its position (row and column) and what it represents.\n *\n * It can be part of a position probe (aka those big squares at the extremities), part of a position\n * adjustment square, part of a timing pattern or just another square as any other :)\n *\n * @author Rafael Lins - g0dkar\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ndata class QRCodeSquare(\n    /** Is this a painted square? */\n    var dark: Boolean,\n    /** The row (top-to-bottom) that this square represents. */\n    val row: Int,\n    /** The column (left-to-right) that this square represents. */\n    val col: Int,\n    /** How big is the whole QRCode matrix? (e.g. if this is \"16\" then this is part of a 16x16 matrix) */\n    val moduleSize: Int,\n    /** What does this square represent within the QRCode? */\n    val squareInfo: QRCodeSquareInfo = QRCodeSquareInfo(DEFAULT, UNKNOWN),\n    /** How many actual QRCode squares this one take up? (1 = a single square, >1 = likely a probe) */\n    val rowSize: Int = 1,\n    /** How many actual QRCode squares this one take up? (1 = a single square, >1 = likely a probe) */\n    val colSize: Int = 1,\n    /** Filled if this square is part of a larger one (like a [QRCodeSquareType.POSITION_PROBE]) */\n    val parent: QRCodeSquare? = null,\n) {\n    var rendered: Boolean = false\n\n    /** Calculates where is the X position where this square will be in the main QRCode image given a [cellSize]. */\n    @JvmOverloads\n    fun absoluteX(cellSize: Int = QRCodeProcessor.DEFAULT_CELL_SIZE): Int = col * cellSize\n\n    /** Calculates where is the Y position where this square will be in the main QRCode image given a [cellSize]. */\n    @JvmOverloads\n    fun absoluteY(cellSize: Int = QRCodeProcessor.DEFAULT_CELL_SIZE): Int = row * cellSize\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other == null || this::class != other::class) return false\n\n        other as QRCodeSquare\n\n        if (row != other.row) return false\n        if (col != other.col) return false\n        if (rowSize != other.rowSize) return false\n        if (colSize != other.colSize) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = row\n        result = 31 * result + col\n        result = 31 * result + rowSize\n        result = 31 * result + colSize\n        return result\n    }\n}\n\n/**\n * Returns information on the square itself. It has the [type] of square and its [region] within its relative type.\n *\n * For example, if `type = POSITION_PROBE` then [region] will represent where within the Position Probe this square\n * is positioned. A [region] of [QRCodeRegion.TOP_LEFT_CORNER] for example represents the top left corner of the\n * position probe this particular square is part of (a QRCode have 3 position probes).\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ndata class QRCodeSquareInfo(\n    val type: QRCodeSquareType,\n    val region: QRCodeRegion,\n) {\n    companion object {\n        internal fun margin() = QRCodeSquareInfo(MARGIN, QRCodeRegion.MARGIN)\n    }\n}\n\n/**\n * The types available for squares in a QRCode.\n *\n * @author Rafael Lins - g0dkar\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nenum class QRCodeSquareType {\n    /** Part of a position probe: one of those big squares at the extremities of the QRCode. */\n    POSITION_PROBE,\n\n    /** Part of a position adjustment pattern: just like a position probe, but much smaller. */\n    POSITION_ADJUST,\n\n    /** Part of the timing pattern. Make it a square like any other :) */\n    TIMING_PATTERN,\n\n    /** Anything special. Just a square. */\n    DEFAULT,\n\n    /** Used to point out that this is part of the margin. */\n    MARGIN\n}\n\n/**\n * Represents which part/region of a given square type a particular, single square is.\n *\n * For example, a position probe is visually composed of multiple squares that form a bigger one.\n *\n * For example, this is what a position probe normally looks like (squares spaced for ease of understanding):\n *\n * ```\n * A■■■■B\n * ■ ■■ ■\n * ■ ■■ ■\n * C■■■■D\n * ```\n *\n * The positions marked with `A`, `B`, `C` and `D` would be regions [TOP_LEFT_CORNER], [TOP_RIGHT_CORNER],\n * [BOTTOM_LEFT_CORNER] and [BOTTOM_RIGHT_CORNER] respectively.\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nenum class QRCodeRegion {\n    TOP_LEFT_CORNER,\n    TOP_RIGHT_CORNER,\n    TOP_MID,\n    LEFT_MID,\n    RIGHT_MID,\n    CENTER,\n    BOTTOM_LEFT_CORNER,\n    BOTTOM_RIGHT_CORNER,\n    BOTTOM_MID,\n    MARGIN,\n    UNKNOWN\n}\n","package qrcode.internals\n\nimport qrcode.raw.QRCodeDataType\nimport qrcode.raw.QRCodeDataType.DEFAULT\nimport qrcode.raw.QRCodeDataType.NUMBERS\nimport qrcode.raw.QRCodeDataType.UPPER_ALPHA_NUM\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRData.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal abstract class QRData(val dataType: QRCodeDataType, val data: String) {\n    abstract fun length(): Int\n\n    abstract fun write(buffer: BitBuffer)\n\n    fun getLengthInBits(type: Int): Int =\n        when (type) {\n            in 1..9 -> {\n                when (dataType) {\n                    NUMBERS -> 10\n                    UPPER_ALPHA_NUM -> 9\n                    DEFAULT -> 8\n                }\n            }\n            in 1..26 -> {\n                when (dataType) {\n                    NUMBERS -> 12\n                    UPPER_ALPHA_NUM -> 11\n                    DEFAULT -> 16\n                }\n            }\n            in 1..40 -> {\n                when (dataType) {\n                    NUMBERS -> 14\n                    UPPER_ALPHA_NUM -> 13\n                    DEFAULT -> 16\n                }\n            }\n            else -> {\n                throw IllegalArgumentException(\"'type' must be greater than 0 and cannot be greater than 40: $type\")\n            }\n        }\n}\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QR8BitByte.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal class QR8BitByte(data: String) : QRData(DEFAULT, data) {\n    private val dataBytes = data.encodeToByteArray()\n\n    override fun write(buffer: BitBuffer) {\n        for (i in dataBytes.indices) {\n            buffer.put(dataBytes[i].toInt(), 8)\n        }\n    }\n\n    override fun length(): Int =\n        dataBytes.size\n}\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRAlphaNum.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal class QRAlphaNum(data: String) : QRData(UPPER_ALPHA_NUM, data) {\n    override fun write(buffer: BitBuffer) {\n        var i = 0\n        val dataLength = data.length\n        while (i + 1 < dataLength) {\n            buffer.put(charCode(data[i]) * 45 + charCode(data[i + 1]), 11)\n            i += 2\n        }\n        if (i < dataLength) {\n            buffer.put(charCode(data[i]), 6)\n        }\n    }\n\n    override fun length(): Int = data.length\n\n    private fun charCode(c: Char): Int =\n        when (c) {\n            in '0'..'9' -> c - '0'\n            in 'A'..'Z' -> c - 'A' + 10\n            else -> {\n                when (c) {\n                    ' ' -> 36\n                    '$' -> 37\n                    '%' -> 38\n                    '*' -> 39\n                    '+' -> 40\n                    '-' -> 41\n                    '.' -> 42\n                    '/' -> 43\n                    ':' -> 44\n                    else -> throw IllegalArgumentException(\"Illegal character: $c\")\n                }\n            }\n        }\n}\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRNumber.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal class QRNumber(data: String) : QRData(NUMBERS, data) {\n    override fun write(buffer: BitBuffer) {\n        var i = 0\n        val len = length()\n\n        while (i + 2 < len) {\n            val num = data.substring(i, i + 3).toInt()\n            buffer.put(num, 10)\n            i += 3\n        }\n\n        if (i < len) {\n            if (len - i == 1) {\n                val num = data.substring(i, i + 1).toInt()\n                buffer.put(num, 4)\n            } else if (len - i == 2) {\n                val num = data.substring(i, i + 2).toInt()\n                buffer.put(num, 7)\n            }\n        }\n    }\n\n    override fun length(): Int = data.length\n}\n","package qrcode.internals\n\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRMath.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ninternal object QRMath {\n    private val EXP_TABLE = IntArray(256)\n    private val LOG_TABLE = IntArray(256)\n\n    fun glog(n: Int): Int = LOG_TABLE[n]\n\n    fun gexp(n: Int): Int {\n        var i = n\n        while (i < 0) {\n            i += 255\n        }\n        while (i >= 256) {\n            i -= 255\n        }\n        return EXP_TABLE[i]\n    }\n\n    /**\n     * From https://math.stackexchange.com/a/3086626/874981\n     */\n    fun rectsIntersect(x1: Int, y1: Int, w1: Int, h1: Int, x2: Int, y2: Int, w2: Int, h2: Int): Boolean {\n        val x1End = x1 + w1\n        val y1End = y1 + h1\n        val x2End = x2 + w2\n        val y2End = y2 + h2\n\n        return x1End < x2 || x1 > x2End || y1End < y2 || y1 > y2End\n    }\n\n    init {\n        for (i in 0..7) {\n            EXP_TABLE[i] = 1 shl i\n        }\n\n        for (i in 8..255) {\n            EXP_TABLE[i] = (\n                EXP_TABLE[i - 4]\n                    xor EXP_TABLE[i - 5]\n                    xor EXP_TABLE[i - 6]\n                    xor EXP_TABLE[i - 8]\n                )\n        }\n\n        for (i in 0..254) {\n            LOG_TABLE[EXP_TABLE[i]] = i\n        }\n    }\n}\n","package qrcode.internals\n\nimport qrcode.raw.ErrorCorrectionLevel\nimport qrcode.raw.MaskPattern\nimport qrcode.raw.MaskPattern.PATTERN000\nimport qrcode.raw.MaskPattern.PATTERN001\nimport qrcode.raw.MaskPattern.PATTERN010\nimport qrcode.raw.MaskPattern.PATTERN011\nimport qrcode.raw.MaskPattern.PATTERN100\nimport qrcode.raw.MaskPattern.PATTERN101\nimport qrcode.raw.MaskPattern.PATTERN110\nimport qrcode.raw.MaskPattern.PATTERN111\nimport qrcode.raw.QRCodeDataType\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRUtil.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ninternal object QRUtil {\n    fun getPatternPosition(typeNumber: Int): IntArray = PATTERN_POSITION_TABLE[typeNumber - 1]\n\n    private val PATTERN_POSITION_TABLE = arrayOf(\n        intArrayOf(),\n        intArrayOf(6, 18),\n        intArrayOf(6, 22),\n        intArrayOf(6, 26),\n        intArrayOf(6, 30),\n        intArrayOf(6, 34),\n        intArrayOf(6, 22, 38),\n        intArrayOf(6, 24, 42),\n        intArrayOf(6, 26, 46),\n        intArrayOf(6, 28, 50),\n        intArrayOf(6, 30, 54),\n        intArrayOf(6, 32, 58),\n        intArrayOf(6, 34, 62),\n        intArrayOf(6, 26, 46, 66),\n        intArrayOf(6, 26, 48, 70),\n        intArrayOf(6, 26, 50, 74),\n        intArrayOf(6, 30, 54, 78),\n        intArrayOf(6, 30, 56, 82),\n        intArrayOf(6, 30, 58, 86),\n        intArrayOf(6, 34, 62, 90),\n        intArrayOf(6, 28, 50, 72, 94),\n        intArrayOf(6, 26, 50, 74, 98),\n        intArrayOf(6, 30, 54, 78, 102),\n        intArrayOf(6, 28, 54, 80, 106),\n        intArrayOf(6, 32, 58, 84, 110),\n        intArrayOf(6, 30, 58, 86, 114),\n        intArrayOf(6, 34, 62, 90, 118),\n        intArrayOf(6, 26, 50, 74, 98, 122),\n        intArrayOf(6, 30, 54, 78, 102, 126),\n        intArrayOf(6, 26, 52, 78, 104, 130),\n        intArrayOf(6, 30, 56, 82, 108, 134),\n        intArrayOf(6, 34, 60, 86, 112, 138),\n        intArrayOf(6, 30, 58, 86, 114, 142),\n        intArrayOf(6, 34, 62, 90, 118, 146),\n        intArrayOf(6, 30, 54, 78, 102, 126, 150),\n        intArrayOf(6, 24, 50, 76, 102, 128, 154),\n        intArrayOf(6, 28, 54, 80, 106, 132, 158),\n        intArrayOf(6, 32, 58, 84, 110, 136, 162),\n        intArrayOf(6, 26, 54, 82, 110, 138, 166),\n        intArrayOf(6, 30, 58, 86, 114, 142, 170)\n    )\n\n    private val MAX_LENGTH = arrayOf(\n        arrayOf(\n            intArrayOf(41, 25, 17, 10),\n            intArrayOf(34, 20, 14, 8),\n            intArrayOf(27, 16, 11, 7),\n            intArrayOf(17, 10, 7, 4)\n        ),\n        arrayOf(\n            intArrayOf(77, 47, 32, 20),\n            intArrayOf(63, 38, 26, 16),\n            intArrayOf(48, 29, 20, 12),\n            intArrayOf(34, 20, 14, 8)\n        ),\n        arrayOf(\n            intArrayOf(127, 77, 53, 32),\n            intArrayOf(101, 61, 42, 26),\n            intArrayOf(77, 47, 32, 20),\n            intArrayOf(58, 35, 24, 15)\n        ),\n        arrayOf(\n            intArrayOf(187, 114, 78, 48),\n            intArrayOf(149, 90, 62, 38),\n            intArrayOf(111, 67, 46, 28),\n            intArrayOf(82, 50, 34, 21)\n        ),\n        arrayOf(\n            intArrayOf(255, 154, 106, 65),\n            intArrayOf(202, 122, 84, 52),\n            intArrayOf(144, 87, 60, 37),\n            intArrayOf(106, 64, 44, 27)\n        ),\n        arrayOf(\n            intArrayOf(322, 195, 134, 82),\n            intArrayOf(255, 154, 106, 65),\n            intArrayOf(178, 108, 74, 45),\n            intArrayOf(139, 84, 58, 36)\n        ),\n        arrayOf(\n            intArrayOf(370, 224, 154, 95),\n            intArrayOf(293, 178, 122, 75),\n            intArrayOf(207, 125, 86, 53),\n            intArrayOf(154, 93, 64, 39)\n        ),\n        arrayOf(\n            intArrayOf(461, 279, 192, 118),\n            intArrayOf(365, 221, 152, 93),\n            intArrayOf(259, 157, 108, 66),\n            intArrayOf(202, 122, 84, 52)\n        ),\n        arrayOf(\n            intArrayOf(552, 335, 230, 141),\n            intArrayOf(432, 262, 180, 111),\n            intArrayOf(312, 189, 130, 80),\n            intArrayOf(235, 143, 98, 60)\n        ),\n        arrayOf(\n            intArrayOf(652, 395, 271, 167),\n            intArrayOf(513, 311, 213, 131),\n            intArrayOf(364, 221, 151, 93),\n            intArrayOf(288, 174, 119, 74)\n        ),\n        arrayOf(\n            intArrayOf(772, 468, 321, 198),\n            intArrayOf(604, 366, 251, 155),\n            intArrayOf(427, 259, 177, 109),\n            intArrayOf(331, 200, 137, 85)\n        ),\n        arrayOf(\n            intArrayOf(883, 535, 367, 226),\n            intArrayOf(691, 419, 287, 177),\n            intArrayOf(489, 296, 203, 125),\n            intArrayOf(374, 227, 155, 96)\n        ),\n        arrayOf(\n            intArrayOf(1022, 619, 425, 262),\n            intArrayOf(796, 483, 331, 204),\n            intArrayOf(580, 352, 241, 149),\n            intArrayOf(427, 259, 177, 109)\n        ),\n        arrayOf(\n            intArrayOf(1101, 667, 458, 282),\n            intArrayOf(871, 528, 362, 223),\n            intArrayOf(621, 376, 258, 159),\n            intArrayOf(468, 283, 194, 120)\n        ),\n        arrayOf(\n            intArrayOf(1250, 758, 520, 320),\n            intArrayOf(991, 600, 412, 254),\n            intArrayOf(703, 426, 292, 180),\n            intArrayOf(530, 321, 220, 136)\n        ),\n        arrayOf(\n            intArrayOf(1408, 854, 586, 361),\n            intArrayOf(1082, 656, 450, 277),\n            intArrayOf(775, 470, 322, 198),\n            intArrayOf(602, 365, 250, 154)\n        ),\n        arrayOf(\n            intArrayOf(1548, 938, 644, 397),\n            intArrayOf(1212, 734, 504, 310),\n            intArrayOf(876, 531, 364, 224),\n            intArrayOf(674, 408, 280, 173)\n        ),\n        arrayOf(\n            intArrayOf(1725, 1046, 718, 442),\n            intArrayOf(1346, 816, 560, 345),\n            intArrayOf(948, 574, 394, 243),\n            intArrayOf(746, 452, 310, 191)\n        ),\n        arrayOf(\n            intArrayOf(1903, 1153, 792, 488),\n            intArrayOf(1500, 909, 624, 384),\n            intArrayOf(1063, 644, 442, 272),\n            intArrayOf(813, 493, 338, 208)\n        ),\n        arrayOf(\n            intArrayOf(2061, 1249, 858, 528),\n            intArrayOf(1600, 970, 666, 410),\n            intArrayOf(1159, 702, 482, 297),\n            intArrayOf(919, 557, 382, 235)\n        ),\n        arrayOf(\n            intArrayOf(2232, 1352, 929, 572),\n            intArrayOf(1708, 1035, 711, 438),\n            intArrayOf(1224, 742, 509, 314),\n            intArrayOf(969, 587, 403, 248)\n        ),\n        arrayOf(\n            intArrayOf(2409, 1460, 1003, 618),\n            intArrayOf(1872, 1134, 779, 480),\n            intArrayOf(1358, 823, 565, 348),\n            intArrayOf(1056, 640, 439, 270)\n        ),\n        arrayOf(\n            intArrayOf(2620, 1588, 1091, 672),\n            intArrayOf(2059, 1248, 857, 528),\n            intArrayOf(1468, 890, 611, 376),\n            intArrayOf(1108, 672, 461, 284)\n        ),\n        arrayOf(\n            intArrayOf(2812, 1704, 1171, 721),\n            intArrayOf(2188, 1326, 911, 561),\n            intArrayOf(1588, 963, 661, 407),\n            intArrayOf(1228, 744, 511, 315)\n        ),\n        arrayOf(\n            intArrayOf(3057, 1853, 1273, 784),\n            intArrayOf(2395, 1451, 997, 614),\n            intArrayOf(1718, 1041, 715, 440),\n            intArrayOf(1286, 779, 535, 330)\n        ),\n        arrayOf(\n            intArrayOf(3283, 1990, 1367, 842),\n            intArrayOf(2544, 1542, 1059, 652),\n            intArrayOf(1804, 1094, 751, 462),\n            intArrayOf(1425, 864, 593, 365)\n        ),\n        arrayOf(\n            intArrayOf(3517, 2132, 1465, 902),\n            intArrayOf(2701, 1637, 1125, 692),\n            intArrayOf(1933, 1172, 805, 496),\n            intArrayOf(1501, 910, 625, 385)\n        ),\n        arrayOf(\n            intArrayOf(3669, 2223, 1528, 940),\n            intArrayOf(2857, 1732, 1190, 732),\n            intArrayOf(2085, 1263, 868, 534),\n            intArrayOf(1581, 958, 658, 405)\n        ),\n        arrayOf(\n            intArrayOf(3909, 2369, 1628, 1002),\n            intArrayOf(3035, 1839, 1264, 778),\n            intArrayOf(2181, 1322, 908, 559),\n            intArrayOf(1677, 1016, 698, 430)\n        ),\n        arrayOf(\n            intArrayOf(4158, 2520, 1732, 1066),\n            intArrayOf(3289, 1994, 1370, 843),\n            intArrayOf(2358, 1429, 982, 604),\n            intArrayOf(1782, 1080, 742, 457)\n        ),\n        arrayOf(\n            intArrayOf(4417, 2677, 1840, 1132),\n            intArrayOf(3486, 2113, 1452, 894),\n            intArrayOf(2473, 1499, 1030, 634),\n            intArrayOf(1897, 1150, 790, 486)\n        ),\n        arrayOf(\n            intArrayOf(4686, 2840, 1952, 1201),\n            intArrayOf(3693, 2238, 1538, 947),\n            intArrayOf(2670, 1618, 1112, 684),\n            intArrayOf(2022, 1226, 842, 518)\n        ),\n        arrayOf(\n            intArrayOf(4965, 3009, 2068, 1273),\n            intArrayOf(3909, 2369, 1628, 1002),\n            intArrayOf(2805, 1700, 1168, 719),\n            intArrayOf(2157, 1307, 898, 553)\n        ),\n        arrayOf(\n            intArrayOf(5253, 3183, 2188, 1347),\n            intArrayOf(4134, 2506, 1722, 1060),\n            intArrayOf(2949, 1787, 1228, 756),\n            intArrayOf(2301, 1394, 958, 590)\n        )\n    )\n\n    fun getMaxLength(typeNumber: Int, dataType: QRCodeDataType, errorCorrectionLevel: ErrorCorrectionLevel): Int =\n        MAX_LENGTH[typeNumber - 1][errorCorrectionLevel.ordinal][dataType.ordinal]\n\n    @Suppress(\"NON_EXPORTABLE_TYPE\")\n    fun getErrorCorrectPolynomial(errorCorrectLength: Int): Polynomial {\n        var a = Polynomial(intArrayOf(1))\n        for (i in 0 until errorCorrectLength) {\n            a = a.multiply(Polynomial(intArrayOf(1, QRMath.gexp(i))))\n        }\n        return a\n    }\n\n    /**\n     * Each Mask Pattern [applies a different formula](https://www.thonky.com/qr-code-tutorial/mask-patterns).\n     */\n    fun getMask(maskPattern: MaskPattern, i: Int, j: Int): Boolean =\n        when (maskPattern) {\n            PATTERN000 -> (i + j) % 2 == 0\n            PATTERN001 -> i % 2 == 0\n            PATTERN010 -> j % 3 == 0\n            PATTERN011 -> (i + j) % 3 == 0\n            PATTERN100 -> (i / 2 + j / 3) % 2 == 0\n            PATTERN101 -> (i * j) % 2 + (i * j) % 3 == 0\n            PATTERN110 -> ((i * j) % 2 + (i * j) % 3) % 2 == 0\n            PATTERN111 -> ((i * j) % 3 + (i + j) % 2) % 2 == 0\n        }\n\n    /**\n     * Returns a suitable [QRCodeDataType] to the given input String based on a simple matching.\n     *\n     * @see QRCodeDataType\n     */\n    fun getDataType(s: String): QRCodeDataType =\n        if (isAlphaNum(s)) {\n            if (isNumber(s)) {\n                QRCodeDataType.NUMBERS\n            } else {\n                QRCodeDataType.UPPER_ALPHA_NUM\n            }\n        } else {\n            QRCodeDataType.DEFAULT\n        }\n\n    private fun isNumber(s: String) = s.matches(Regex(\"^\\\\d+$\"))\n    private fun isAlphaNum(s: String) = s.matches(Regex(\"^[0-9A-Z $%*+\\\\-./:]+$\"))\n\n    private const val G15 = (\n        1 shl 10 or (1 shl 8) or (1 shl 5)\n            or (1 shl 4) or (1 shl 2) or (1 shl 1) or (1 shl 0)\n        )\n    private const val G18 = (\n        1 shl 12 or (1 shl 11) or (1 shl 10)\n            or (1 shl 9) or (1 shl 8) or (1 shl 5) or (1 shl 2) or (1 shl 0)\n        )\n    private const val G15_MASK = (\n        1 shl 14 or (1 shl 12) or (1 shl 10)\n            or (1 shl 4) or (1 shl 1)\n        )\n\n    fun getBCHTypeInfo(data: Int): Int {\n        var d = data shl 10\n        while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n            d = d xor (G15 shl getBCHDigit(d) - getBCHDigit(G15))\n        }\n        return data shl 10 or d xor G15_MASK\n    }\n\n    fun getBCHTypeNumber(data: Int): Int {\n        var d = data shl 12\n        while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n            d = d xor (G18 shl getBCHDigit(d) - getBCHDigit(G18))\n        }\n        return data shl 12 or d\n    }\n\n    private fun getBCHDigit(data: Int): Int {\n        var i = data\n        var digit = 0\n        while (i != 0) {\n            digit++\n            i = i ushr 1\n        }\n        return digit\n    }\n}\n","package qrcode.internals\n\nimport qrcode.raw.ErrorCorrectionLevel\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/RSBlock.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\ninternal data class RSBlock(val totalCount: Int, val dataCount: Int) {\n    companion object {\n        private val RS_BLOCK_TABLE = arrayOf(\n            intArrayOf(1, 26, 19),\n            intArrayOf(1, 26, 16),\n            intArrayOf(1, 26, 13),\n            intArrayOf(1, 26, 9),\n            intArrayOf(1, 44, 34),\n            intArrayOf(1, 44, 28),\n            intArrayOf(1, 44, 22),\n            intArrayOf(1, 44, 16),\n            intArrayOf(1, 70, 55),\n            intArrayOf(1, 70, 44),\n            intArrayOf(2, 35, 17),\n            intArrayOf(2, 35, 13),\n            intArrayOf(1, 100, 80),\n            intArrayOf(2, 50, 32),\n            intArrayOf(2, 50, 24),\n            intArrayOf(4, 25, 9),\n            intArrayOf(1, 134, 108),\n            intArrayOf(2, 67, 43),\n            intArrayOf(2, 33, 15, 2, 34, 16),\n            intArrayOf(2, 33, 11, 2, 34, 12),\n            intArrayOf(2, 86, 68),\n            intArrayOf(4, 43, 27),\n            intArrayOf(4, 43, 19),\n            intArrayOf(4, 43, 15),\n            intArrayOf(2, 98, 78),\n            intArrayOf(4, 49, 31),\n            intArrayOf(2, 32, 14, 4, 33, 15),\n            intArrayOf(4, 39, 13, 1, 40, 14),\n            intArrayOf(2, 121, 97),\n            intArrayOf(2, 60, 38, 2, 61, 39),\n            intArrayOf(4, 40, 18, 2, 41, 19),\n            intArrayOf(4, 40, 14, 2, 41, 15),\n            intArrayOf(2, 146, 116),\n            intArrayOf(3, 58, 36, 2, 59, 37),\n            intArrayOf(4, 36, 16, 4, 37, 17),\n            intArrayOf(4, 36, 12, 4, 37, 13),\n            intArrayOf(2, 86, 68, 2, 87, 69),\n            intArrayOf(4, 69, 43, 1, 70, 44),\n            intArrayOf(6, 43, 19, 2, 44, 20),\n            intArrayOf(6, 43, 15, 2, 44, 16),\n            intArrayOf(4, 101, 81),\n            intArrayOf(1, 80, 50, 4, 81, 51),\n            intArrayOf(4, 50, 22, 4, 51, 23),\n            intArrayOf(3, 36, 12, 8, 37, 13),\n            intArrayOf(2, 116, 92, 2, 117, 93),\n            intArrayOf(6, 58, 36, 2, 59, 37),\n            intArrayOf(4, 46, 20, 6, 47, 21),\n            intArrayOf(7, 42, 14, 4, 43, 15),\n            intArrayOf(4, 133, 107),\n            intArrayOf(8, 59, 37, 1, 60, 38),\n            intArrayOf(8, 44, 20, 4, 45, 21),\n            intArrayOf(12, 33, 11, 4, 34, 12),\n            intArrayOf(3, 145, 115, 1, 146, 116),\n            intArrayOf(4, 64, 40, 5, 65, 41),\n            intArrayOf(11, 36, 16, 5, 37, 17),\n            intArrayOf(11, 36, 12, 5, 37, 13),\n            intArrayOf(5, 109, 87, 1, 110, 88),\n            intArrayOf(5, 65, 41, 5, 66, 42),\n            intArrayOf(5, 54, 24, 7, 55, 25),\n            intArrayOf(11, 36, 12, 7, 37, 13),\n            intArrayOf(5, 122, 98, 1, 123, 99),\n            intArrayOf(7, 73, 45, 3, 74, 46),\n            intArrayOf(15, 43, 19, 2, 44, 20),\n            intArrayOf(3, 45, 15, 13, 46, 16),\n            intArrayOf(1, 135, 107, 5, 136, 108),\n            intArrayOf(10, 74, 46, 1, 75, 47),\n            intArrayOf(1, 50, 22, 15, 51, 23),\n            intArrayOf(2, 42, 14, 17, 43, 15),\n            intArrayOf(5, 150, 120, 1, 151, 121),\n            intArrayOf(9, 69, 43, 4, 70, 44),\n            intArrayOf(17, 50, 22, 1, 51, 23),\n            intArrayOf(2, 42, 14, 19, 43, 15),\n            intArrayOf(3, 141, 113, 4, 142, 114),\n            intArrayOf(3, 70, 44, 11, 71, 45),\n            intArrayOf(17, 47, 21, 4, 48, 22),\n            intArrayOf(9, 39, 13, 16, 40, 14),\n            intArrayOf(3, 135, 107, 5, 136, 108),\n            intArrayOf(3, 67, 41, 13, 68, 42),\n            intArrayOf(15, 54, 24, 5, 55, 25),\n            intArrayOf(15, 43, 15, 10, 44, 16),\n            intArrayOf(4, 144, 116, 4, 145, 117),\n            intArrayOf(17, 68, 42),\n            intArrayOf(17, 50, 22, 6, 51, 23),\n            intArrayOf(19, 46, 16, 6, 47, 17),\n            intArrayOf(2, 139, 111, 7, 140, 112),\n            intArrayOf(17, 74, 46),\n            intArrayOf(7, 54, 24, 16, 55, 25),\n            intArrayOf(34, 37, 13),\n            intArrayOf(4, 151, 121, 5, 152, 122),\n            intArrayOf(4, 75, 47, 14, 76, 48),\n            intArrayOf(11, 54, 24, 14, 55, 25),\n            intArrayOf(16, 45, 15, 14, 46, 16),\n            intArrayOf(6, 147, 117, 4, 148, 118),\n            intArrayOf(6, 73, 45, 14, 74, 46),\n            intArrayOf(11, 54, 24, 16, 55, 25),\n            intArrayOf(30, 46, 16, 2, 47, 17),\n            intArrayOf(8, 132, 106, 4, 133, 107),\n            intArrayOf(8, 75, 47, 13, 76, 48),\n            intArrayOf(7, 54, 24, 22, 55, 25),\n            intArrayOf(22, 45, 15, 13, 46, 16),\n            intArrayOf(10, 142, 114, 2, 143, 115),\n            intArrayOf(19, 74, 46, 4, 75, 47),\n            intArrayOf(28, 50, 22, 6, 51, 23),\n            intArrayOf(33, 46, 16, 4, 47, 17),\n            intArrayOf(8, 152, 122, 4, 153, 123),\n            intArrayOf(22, 73, 45, 3, 74, 46),\n            intArrayOf(8, 53, 23, 26, 54, 24),\n            intArrayOf(12, 45, 15, 28, 46, 16),\n            intArrayOf(3, 147, 117, 10, 148, 118),\n            intArrayOf(3, 73, 45, 23, 74, 46),\n            intArrayOf(4, 54, 24, 31, 55, 25),\n            intArrayOf(11, 45, 15, 31, 46, 16),\n            intArrayOf(7, 146, 116, 7, 147, 117),\n            intArrayOf(21, 73, 45, 7, 74, 46),\n            intArrayOf(1, 53, 23, 37, 54, 24),\n            intArrayOf(19, 45, 15, 26, 46, 16),\n            intArrayOf(5, 145, 115, 10, 146, 116),\n            intArrayOf(19, 75, 47, 10, 76, 48),\n            intArrayOf(15, 54, 24, 25, 55, 25),\n            intArrayOf(23, 45, 15, 25, 46, 16),\n            intArrayOf(13, 145, 115, 3, 146, 116),\n            intArrayOf(2, 74, 46, 29, 75, 47),\n            intArrayOf(42, 54, 24, 1, 55, 25),\n            intArrayOf(23, 45, 15, 28, 46, 16),\n            intArrayOf(17, 145, 115),\n            intArrayOf(10, 74, 46, 23, 75, 47),\n            intArrayOf(10, 54, 24, 35, 55, 25),\n            intArrayOf(19, 45, 15, 35, 46, 16),\n            intArrayOf(17, 145, 115, 1, 146, 116),\n            intArrayOf(14, 74, 46, 21, 75, 47),\n            intArrayOf(29, 54, 24, 19, 55, 25),\n            intArrayOf(11, 45, 15, 46, 46, 16),\n            intArrayOf(13, 145, 115, 6, 146, 116),\n            intArrayOf(14, 74, 46, 23, 75, 47),\n            intArrayOf(44, 54, 24, 7, 55, 25),\n            intArrayOf(59, 46, 16, 1, 47, 17),\n            intArrayOf(12, 151, 121, 7, 152, 122),\n            intArrayOf(12, 75, 47, 26, 76, 48),\n            intArrayOf(39, 54, 24, 14, 55, 25),\n            intArrayOf(22, 45, 15, 41, 46, 16),\n            intArrayOf(6, 151, 121, 14, 152, 122),\n            intArrayOf(6, 75, 47, 34, 76, 48),\n            intArrayOf(46, 54, 24, 10, 55, 25),\n            intArrayOf(2, 45, 15, 64, 46, 16),\n            intArrayOf(17, 152, 122, 4, 153, 123),\n            intArrayOf(29, 74, 46, 14, 75, 47),\n            intArrayOf(49, 54, 24, 10, 55, 25),\n            intArrayOf(24, 45, 15, 46, 46, 16),\n            intArrayOf(4, 152, 122, 18, 153, 123),\n            intArrayOf(13, 74, 46, 32, 75, 47),\n            intArrayOf(48, 54, 24, 14, 55, 25),\n            intArrayOf(42, 45, 15, 32, 46, 16),\n            intArrayOf(20, 147, 117, 4, 148, 118),\n            intArrayOf(40, 75, 47, 7, 76, 48),\n            intArrayOf(43, 54, 24, 22, 55, 25),\n            intArrayOf(10, 45, 15, 67, 46, 16),\n            intArrayOf(19, 148, 118, 6, 149, 119),\n            intArrayOf(18, 75, 47, 31, 76, 48),\n            intArrayOf(34, 54, 24, 34, 55, 25),\n            intArrayOf(20, 45, 15, 61, 46, 16)\n        )\n\n        fun getRSBlocks(typeNumber: Int, errorCorrectionLevel: ErrorCorrectionLevel): Array<RSBlock> =\n            RS_BLOCK_TABLE[(typeNumber - 1) * 4 + errorCorrectionLevel.ordinal]\n                .let { rsBlock ->\n                    if (rsBlock.size == 3) {\n                        val block = RSBlock(rsBlock[1], rsBlock[2])\n                        Array(rsBlock[0]) { block }\n                    } else {\n                        val blocksSize = rsBlock[0] + rsBlock[3]\n                        val firstBlock = RSBlock(rsBlock[1], rsBlock[2])\n                        val secondBlock = RSBlock(rsBlock[4], rsBlock[5])\n\n                        Array(blocksSize) {\n                            if (it < rsBlock[0]) {\n                                firstBlock\n                            } else {\n                                secondBlock\n                            }\n                        }\n                    }\n                }\n    }\n}\n","package qrcode.raw\n\nimport qrcode.raw.ErrorCorrectionLevel.H\nimport qrcode.raw.ErrorCorrectionLevel.Q\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * The level of Error Correction to apply to the QR Code image. The Higher the Error Correction, the lower quality\n * **print** the QRCode can be (think of \"wow, even with the paper a bit crumpled, it still read the QR Code!\" - that\n * is likely a [Q] or [H] error correction).\n *\n * The trade-off is the amount of data you can encode. The higher the error correction level, the less amount of data\n * you'll be able to encode.\n *\n * Please consult [Kazuhiko's Online Demo](https://kazuhikoarase.github.io/qrcode-generator/js/demo/) where at the time\n * of writing a handy table showed how many bytes can be encoded given a data type ([QRCodeDataType]) and Error Correction Level.\n *\n * This library automatically tries to fit ~2048 bytes into the QR Code regardless of error correction level. That is\n * the reason and meaning of [maxTypeNum].\n *\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/ErrorCorrectionLevel.java)\n *\n * @param value Value associated with this error correction level\n * @param maxTypeNum Maximum `type` value which can fit 2048 bytes. Used to automatically calculate the `type` value.\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nenum class ErrorCorrectionLevel(val value: Int, val maxTypeNum: Int) {\n    L(1, 21),\n    M(0, 25),\n    Q(3, 30),\n    H(2, 34)\n}\n\n/**\n * Patterns to apply to the QRCode. They change how the QRCode looks in the end.\n *\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/MaskPattern.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nenum class MaskPattern {\n    /** This is the default pattern (no pattern is applied) */\n    PATTERN000,\n    PATTERN001,\n    PATTERN010,\n    PATTERN011,\n    PATTERN100,\n    PATTERN101,\n    PATTERN110,\n    PATTERN111\n}\n\n/**\n * QRCode Modes. Basically represents which kind of data is being encoded.\n *\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/Mode.java)\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nenum class QRCodeDataType(val value: Int) {\n    /** Strictly numerical data. Like huge integers. These can be way bigger than [Long.MAX_VALUE]. */\n    NUMBERS(1 shl 0),\n\n    /** Represents Uppercase Alphanumerical data. Allowed characters: `[0-9A-Z $%*+\\-./:]`. */\n    UPPER_ALPHA_NUM(1 shl 1),\n\n    /** This can be any kind of data. With this you can encode Strings, URLs, images, files, anything. */\n    DEFAULT(1 shl 2)\n}\n","package qrcode.raw\n\nimport qrcode.color.Colors\nimport qrcode.internals.BitBuffer\nimport qrcode.internals.Polynomial\nimport qrcode.internals.QR8BitByte\nimport qrcode.internals.QRAlphaNum\nimport qrcode.internals.QRCodeSetup.applyMaskPattern\nimport qrcode.internals.QRCodeSetup.setupBottomLeftPositionProbePattern\nimport qrcode.internals.QRCodeSetup.setupPositionAdjustPattern\nimport qrcode.internals.QRCodeSetup.setupTimingPattern\nimport qrcode.internals.QRCodeSetup.setupTopLeftPositionProbePattern\nimport qrcode.internals.QRCodeSetup.setupTopRightPositionProbePattern\nimport qrcode.internals.QRCodeSetup.setupTypeInfo\nimport qrcode.internals.QRCodeSetup.setupTypeNumber\nimport qrcode.internals.QRCodeSquare\nimport qrcode.internals.QRCodeSquareInfo\nimport qrcode.internals.QRCodeSquareType\nimport qrcode.internals.QRData\nimport qrcode.internals.QRNumber\nimport qrcode.internals.QRUtil\nimport qrcode.internals.RSBlock\nimport qrcode.raw.QRCodeDataType.DEFAULT\nimport qrcode.raw.QRCodeDataType.NUMBERS\nimport qrcode.raw.QRCodeDataType.UPPER_ALPHA_NUM\nimport qrcode.render.QRCodeGraphics\nimport qrcode.render.QRCodeGraphicsFactory\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.js.JsName\nimport kotlin.jvm.JvmOverloads\nimport kotlin.jvm.JvmStatic\n\n/**\n * A Class/Library that helps encode data as QR Code images without any external dependencies.\n *\n * Rewritten in Kotlin from the [original (GitHub)](https://github.com/kazuhikoarase/qrcode-generator/blob/master/java/src/main/java/com/d_project/qrcode/QRCode.java).\n *\n * To create a QR Code you can simply do the following:\n *\n * ```kotlin\n * val dataToEncode = \"Hello QRCode!\"\n * val eachQRCodeSquareSize = 10 // In Pixels!\n * val qrCodeRenderer = QRCode(dataToEncode).render(eachQRCodeSquareSize)\n * ```\n *\n * You can now use `qrCodeRenderer` to render your QRCode into any `OutputStream` (as a PNG by default)\n *\n * For example, to simply save it on the disk:\n *\n * ```kotlin\n * val qrCodeFile = File(\"qrcode.png\")\n * qrCodeFile.outputStream().use { qrCodeRenderer.writeImage(it) }\n * ```\n *\n * Or maybe have it as a byte array, to be sent as a response to a server request:\n *\n * ```kotlin\n * val imageBytes = ByteArrayOutputStream()\n *     .also { qrCodeRenderer.writeImage(it) }\n *     .toByteArray()\n * ```\n *\n * @param data String that will be encoded in the QR Code.\n * @param errorCorrectionLevel The level of Error Correction that should be applied to the QR Code. Defaults to [ErrorCorrectionLevel.M].\n * @param dataType One of the available [QRCodeDataType]. By default, the code tries to guess which one is the best fitting one from your input data.\n *\n * @author Rafael Lins - g0dkar\n * @author Kazuhiko Arase - kazuhikoarase\n *\n * @see ErrorCorrectionLevel\n * @see QRUtil.getDataType\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\", \"MemberVisibilityCanBePrivate\")\nclass QRCodeProcessor @JvmOverloads constructor(\n    private val data: String,\n    private val errorCorrectionLevel: ErrorCorrectionLevel = ErrorCorrectionLevel.M,\n    private val dataType: QRCodeDataType = QRUtil.getDataType(data),\n    val graphicsFactory: QRCodeGraphicsFactory = QRCodeGraphicsFactory(),\n) {\n    private val qrCodeData: QRData = when (dataType) {\n        NUMBERS -> QRNumber(data)\n        UPPER_ALPHA_NUM -> QRAlphaNum(data)\n        DEFAULT -> QR8BitByte(data)\n    }\n\n    companion object {\n        const val DEFAULT_CELL_SIZE = 25\n        const val DEFAULT_MARGIN = 0\n        private const val PAD0 = 0xEC\n        private const val PAD1 = 0x11\n\n        /**\n         * Calculates a suitable value for the [dataType] field for you.\n         */\n        @JvmStatic\n        @JvmOverloads\n        fun typeForDataAndECL(\n            data: String,\n            errorCorrectionLevel: ErrorCorrectionLevel,\n            dataType: QRCodeDataType = QRUtil.getDataType(data),\n        ): Int {\n            val qrCodeData = when (dataType) {\n                NUMBERS -> QRNumber(data)\n                UPPER_ALPHA_NUM -> QRAlphaNum(data)\n                DEFAULT -> QR8BitByte(data)\n            }\n            val dataLength = qrCodeData.length()\n\n            for (typeNum in 1 until errorCorrectionLevel.maxTypeNum) {\n                if (dataLength <= QRUtil.getMaxLength(typeNum, dataType, errorCorrectionLevel)) {\n                    return typeNum\n                }\n            }\n\n            return 40\n        }\n    }\n\n    /**\n     * Compute the final size of the image of this QRCode based on the given `cellSize` and `margin`.\n     *\n     * This means this QRCode will be `<size> x <size>` pixels. For example, if this method returns 100, the resulting\n     * image will be 100x100 pixels.\n     */\n    @JsName(\"computeImageSizeFromRawData\")\n    fun computeImageSize(\n        cellSize: Int = DEFAULT_CELL_SIZE,\n        margin: Int = 0,\n        rawData: QRCodeRawData = encode(),\n    ): Int = computeImageSize(cellSize, margin, rawData.size)\n\n    /**\n     * Compute the final size of the image of this QRCode based on the given `cellSize` and `margin`.\n     *\n     * This means this QRCode will be `<size> x <size>` pixels. For example, if this method returns 100, the resulting\n     * image will be 100x100 pixels.\n     */\n    fun computeImageSize(\n        cellSize: Int = DEFAULT_CELL_SIZE,\n        margin: Int = DEFAULT_MARGIN,\n        size: Int,\n    ): Int = size * cellSize + margin * 2\n\n    /**\n     * Renders a QR Code image based on its [computed data][encode]. This function exists to ease the interop with\n     * Java :)\n     *\n     * @param cellSize The size **in pixels** of each square (cell) in the QR Code. Defaults to `25`.\n     * @param margin Amount of space **in pixels** to add as a margin around the rendered QR Code. Defaults to `0`.\n     * @param brightColor Color to be used for the \"bright\" parts of the QR Code. In RGBA space. Defaults to [white][Colors.WHITE].\n     * @param darkColor Color to be used for the \"dark\" parts of the QR Code. In RGBA space. Defaults to [black][Colors.BLACK].\n     * @param marginColor Color to be used for the \"margin\" part of the QR Code. In RGBA space. Defaults to [white][Colors.WHITE].\n     *\n     * @return A [QRCodeGraphics] with the QR Code rendered on it. It can then be saved or manipulated as desired.\n     *\n     * @see renderShaded\n     * @see QRCodeSquare\n     * @see QRCodeGraphics\n     * @see Colors\n     */\n    fun render(\n        cellSize: Int = DEFAULT_CELL_SIZE,\n        margin: Int = DEFAULT_MARGIN,\n        brightColor: Int = Colors.WHITE,\n        darkColor: Int = Colors.BLACK,\n        marginColor: Int = Colors.WHITE,\n    ) =\n        render(\n            cellSize = cellSize,\n            margin = margin,\n            rawData = encode(),\n            brightColor = brightColor,\n            darkColor = darkColor,\n            marginColor = marginColor,\n        )\n\n    /**\n     * Renders a QR Code image based on its [computed data][encode].\n     *\n     * _Tip: for the \"traditional look-and-feel\" QR Code, set [margin] equal to [cellSize]._\n     *\n     * @param cellSize The size **in pixels** of each square (cell) in the QR Code. Defaults to `25`.\n     * @param margin Amount of space **in pixels** to add as a margin around the rendered QR Code. Defaults to `0`.\n     * @param rawData The data matrix of the QR Code. Defaults to [this.encode()][encode].\n     * @param qrCodeGraphics The [QRCodeGraphics] where the QRCode will be painted into.\n     * @param brightColor Color to be used for the \"bright\" parts of the QR Code. In RGBA space. Defaults to [white][Colors.WHITE].\n     * @param darkColor Color to be used for the \"dark\" parts of the QR Code. In RGBA space. Defaults to [black][Colors.BLACK].\n     * @param marginColor Color to be used for the \"margin\" part of the QR Code. In RGBA space. Defaults to [white][Colors.WHITE].\n     *\n     * @return A [QRCodeGraphics] with the QR Code rendered on it. It can then be saved or manipulated as desired.\n     *\n     * @see renderShaded\n     * @see QRCodeSquare\n     * @see QRCodeGraphics\n     * @see Colors\n     */\n    @JvmOverloads\n    @JsName(\"renderComputed\")\n    fun render(\n        cellSize: Int = DEFAULT_CELL_SIZE,\n        margin: Int = DEFAULT_MARGIN,\n        rawData: QRCodeRawData = encode(),\n        qrCodeGraphics: QRCodeGraphics = graphicsFactory.newGraphicsSquare(\n            computeImageSize(\n                cellSize,\n                margin,\n                rawData,\n            ),\n        ),\n        brightColor: Int = Colors.WHITE,\n        darkColor: Int = Colors.BLACK,\n        marginColor: Int = Colors.WHITE,\n    ) =\n        renderShaded(\n            cellSize,\n            margin,\n            rawData,\n            qrCodeGraphics,\n        ) { cellData, graphics ->\n            if (cellData.dark) {\n                graphics.fill(darkColor)\n            } else {\n                if (cellData.squareInfo.type != QRCodeSquareType.MARGIN) {\n                    graphics.fill(brightColor)\n                } else {\n                    graphics.fill(marginColor)\n                }\n            }\n        }\n\n    /**\n     * Renders a QR Code image based on its [computed data][encode].\n     *\n     * This function provides a way to implement more artistic QRCodes. The [renderer] is a function that draws a single\n     * square of the QRCode. It receives 2 parameters: [cellData][QRCodeSquare] and a [QRCodeGraphics] for it to freely\n     * draw. After finished, the canvas will be placed into the final image in its respective place.\n     *\n     * To show this, here's a renderer that makes a QR Code that is half [blue][Colors.BLUE] and half [red][Colors.RED]:\n     *\n     * ```kotlin\n     * QRCode(\"example\").renderShaded { cellData, graphics ->\n     *     if (cellData.type != QRCodeSquareType.MARGIN && cellData.dark) {\n     *         if (cellData.row > cellData.size / 2) {\n     *             graphics.fill(Colors.BLUE)\n     *         }\n     *         else {\n     *             graphics.fill(Colors.RED)\n     *         }\n     *     } else {\n     *         graphics.fill(Colors.WHITE)\n     *     }\n     * }\n     * ```\n     *\n     * _Tip: for the \"traditional look-and-feel\" QR Code, try setting [margin] equal to [cellSize]._\n     *\n     * @param cellSize The size **in pixels** of each square (cell) in the QR Code. Defaults to `25`.\n     * @param margin Amount of space **in pixels** to add as a margin around the rendered QR Code. Defaults to `0`.\n     * @param rawData The data matrix of the QR Code. Defaults to [this.encode()][encode].\n     * @param qrCodeGraphics The [QRCodeGraphics] where the QRCode will be painted into.\n     * @param renderer Lambda that draws a single QRCode square. It receives as parameters the [QRCodeSquare] being draw\n     * and a [QRCodeGraphics] for it to draw the square.\n     *\n     * @return A [QRCodeGraphics] with the QR Code rendered on it. It can then be saved or manipulated as desired.\n     *\n     * @see QRCodeSquare\n     * @see QRCodeGraphics\n     * @see Colors\n     */\n    @JvmOverloads\n    fun renderShaded(\n        cellSize: Int = DEFAULT_CELL_SIZE,\n        margin: Int = DEFAULT_MARGIN,\n        rawData: QRCodeRawData = encode(),\n        qrCodeGraphics: QRCodeGraphics = graphicsFactory.newGraphicsSquare(\n            computeImageSize(\n                cellSize,\n                margin,\n                rawData,\n            ),\n        ),\n        renderer: (QRCodeSquare, QRCodeGraphics) -> Unit,\n    ): QRCodeGraphics {\n        if (margin > 0) {\n            val marginSquare = QRCodeSquare(\n                dark = false,\n                row = 0,\n                col = 0,\n                moduleSize = rawData.size,\n                squareInfo = QRCodeSquareInfo.margin(),\n            )\n\n            renderer(marginSquare, qrCodeGraphics)\n        }\n\n        val squareCanvas = graphicsFactory.newGraphicsSquare(cellSize)\n\n        rawData.forEachIndexed { row, rowData ->\n            rowData.forEachIndexed { col, cell ->\n                if (!cell.rendered) {\n                    renderer(cell, squareCanvas)\n\n                    cell.rendered = true\n\n                    if (squareCanvas.changed()) {\n                        qrCodeGraphics.drawImage(\n                            squareCanvas,\n                            margin + cellSize * col,\n                            margin + cellSize * row,\n                        )\n\n                        squareCanvas.reset()\n                    }\n                }\n            }\n        }\n\n        return qrCodeGraphics\n    }\n\n    /**\n     * Computes and encodes the [data] of this object into a QR Code. This method returns the raw data of the QR Code.\n     *\n     * If you just want to render (create) a QR Code image, you are probably looking for the [renderShaded] method.\n     *\n     * @param type `type` value for the QRCode computation. Between 0 and 40. Read more about it [here][ErrorCorrectionLevel].\n     * Defaults to an [automatically calculated value][typeForDataAndECL] based on [data] and the [errorCorrectionLevel].\n     * @param maskPattern Mask Pattern to apply to the final QR Code. Basically changes how the QR Code looks at the end.\n     * Read more about it [here][MaskPattern]. Defaults to [MaskPattern.PATTERN000].\n     *\n     * @return The byte matrix of the encoded QRCode.\n     *\n     * @see typeForDataAndECL\n     * @see ErrorCorrectionLevel\n     * @see MaskPattern\n     * @see renderShaded\n     */\n    @JvmOverloads\n    fun encode(\n        type: Int = typeForDataAndECL(data, errorCorrectionLevel),\n        maskPattern: MaskPattern = MaskPattern.PATTERN000,\n    ): QRCodeRawData {\n        val moduleCount = type * 4 + 17\n        val modules: Array<Array<QRCodeSquare?>> =\n            Array(moduleCount) { Array(moduleCount) { null } }\n\n        setupTopLeftPositionProbePattern(modules)\n        setupTopRightPositionProbePattern(modules)\n        setupBottomLeftPositionProbePattern(modules)\n\n        setupPositionAdjustPattern(type, modules)\n        setupTimingPattern(moduleCount, modules)\n        setupTypeInfo(errorCorrectionLevel, maskPattern, moduleCount, modules)\n\n        if (type >= 7) {\n            setupTypeNumber(type, moduleCount, modules)\n        }\n\n        val data = createData(type)\n\n        applyMaskPattern(data, maskPattern, moduleCount, modules)\n\n        return Array(moduleCount) { row ->\n            Array(moduleCount) { column ->\n                modules[row][column] ?: QRCodeSquare(false, row, column, moduleCount)\n            }\n        }\n    }\n\n    private fun createData(type: Int): IntArray {\n        val rsBlocks = RSBlock.getRSBlocks(type, errorCorrectionLevel)\n        val buffer = BitBuffer()\n\n        buffer.put(qrCodeData.dataType.value, 4)\n        buffer.put(qrCodeData.length(), qrCodeData.getLengthInBits(type))\n        qrCodeData.write(buffer)\n\n        val totalDataCount = rsBlocks.sumOf { it.dataCount } * 8\n\n        if (buffer.lengthInBits > totalDataCount) {\n            throw IllegalArgumentException(\"Code length overflow (${buffer.lengthInBits} > $totalDataCount)\")\n        }\n\n        if (buffer.lengthInBits + 4 <= totalDataCount) {\n            buffer.put(0, 4)\n        }\n\n        while (buffer.lengthInBits % 8 != 0) {\n            buffer.put(false)\n        }\n\n        while (true) {\n            if (buffer.lengthInBits >= totalDataCount) {\n                break\n            }\n\n            buffer.put(PAD0, 8)\n\n            if (buffer.lengthInBits >= totalDataCount) {\n                break\n            }\n\n            buffer.put(PAD1, 8)\n        }\n\n        return createBytes(buffer, rsBlocks)\n    }\n\n    private fun createBytes(buffer: BitBuffer, rsBlocks: Array<RSBlock>): IntArray {\n        var offset = 0\n        var maxDcCount = 0\n        var maxEcCount = 0\n        var totalCodeCount = 0\n        val dcData = Array(rsBlocks.size) { IntArray(0) }\n        val ecData = Array(rsBlocks.size) { IntArray(0) }\n\n        rsBlocks.forEachIndexed { i, it ->\n            val dcCount = it.dataCount\n            val ecCount = it.totalCount - dcCount\n\n            totalCodeCount += it.totalCount\n            maxDcCount = maxDcCount.coerceAtLeast(dcCount)\n            maxEcCount = maxEcCount.coerceAtLeast(ecCount)\n\n            // Init dcData[i]\n            dcData[i] = IntArray(dcCount) { idx -> 0xff and buffer.buffer[idx + offset] }\n            offset += dcCount\n\n            // Init ecData[i]\n            val rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount)\n            val rawPoly = Polynomial(dcData[i], rsPoly.len() - 1)\n            val modPoly = rawPoly.mod(rsPoly)\n            val ecDataSize = rsPoly.len() - 1\n\n            ecData[i] = IntArray(ecDataSize) { idx ->\n                val modIndex = idx + modPoly.len() - ecDataSize\n                if ((modIndex >= 0)) modPoly[modIndex] else 0\n            }\n        }\n\n        var index = 0\n        val data = IntArray(totalCodeCount)\n\n        for (i in 0 until maxDcCount) {\n            for (r in rsBlocks.indices) {\n                if (i < dcData[r].size) {\n                    data[index++] = dcData[r][i]\n                }\n            }\n        }\n\n        for (i in 0 until maxEcCount) {\n            for (r in rsBlocks.indices) {\n                if (i < ecData[r].size) {\n                    data[index++] = ecData[r][i]\n                }\n            }\n        }\n\n        return data\n    }\n\n    override fun toString(): String =\n        \"QRCode(data=$data\" +\n            \", errorCorrectionLevel=$errorCorrectionLevel\" +\n            \", dataType=$dataType\" +\n            \", qrCodeData=${qrCodeData::class.simpleName}\" +\n            \")\"\n}\n","package qrcode.render\n\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * A class used by [QRCode] to build instances of [QRCodeGraphics].\n *\n * It builds the default [QRCodeGraphics] available for the platform.\n *\n * You might extend it to generate customized [QRCodeGraphics] instances.\n *\n * @author Rafael Lins - g0dkar\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\", \"MemberVisibilityCanBePrivate\")\nopen class QRCodeGraphicsFactory {\n    /**\n     * Creates a `size` by `size` square [QRCodeGraphics] instance.\n     */\n    open fun newGraphicsSquare(size: Int) = newGraphics(size, size)\n\n    /**\n     * Creates a new [QRCodeGraphics] instance.\n     */\n    open fun newGraphics(width: Int, height: Int): QRCodeGraphics = QRCodeGraphics(width, height)\n}\n","package qrcode.shape\n\nimport qrcode.raw.QRCodeProcessor.Companion.DEFAULT_CELL_SIZE\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.roundToInt\n\n/**\n * Creates circles instead of squares while drawing the QRCode. By default, the circles will keep `8% of the squareSize`\n * pixels away from each other, to have a more pleasing aesthetics.\n *\n * @param squareSize How big each \"square\" will be, in pixels (defaults to [DEFAULT_CELL_SIZE])\n * @param innerSpace How much space inside each \"square\" will be left empty (1 = 1px of the inner area won't be drawn)\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\nopen class CircleShapeFunction @JvmOverloads constructor(\n    squareSize: Int = DEFAULT_CELL_SIZE,\n    innerSpace: Int = defaultInnerSpace(squareSize)\n) : RoundSquaresShapeFunction(squareSize, radius = squareSize, innerSpace) {\n    companion object {\n        // To avoid an error on the TypeScript side of things\n        fun defaultRadius(squareSize: Int) = (squareSize / 1.75).roundToInt()\n        fun defaultInnerSpace(squareSize: Int) = (squareSize * 0.05).roundToInt()\n    }\n}\n","package qrcode.shape\n\nimport qrcode.QRCode\nimport qrcode.color.QRCodeColorFunction\nimport qrcode.internals.QRCodeSquare\nimport qrcode.internals.QRCodeSquareType.POSITION_PROBE\nimport qrcode.raw.QRCodeProcessor.Companion.DEFAULT_CELL_SIZE\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n *\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\nopen class DefaultShapeFunction(val squareSize: Int = DEFAULT_CELL_SIZE, innerSpace: Int = 1) : QRCodeShapeFunction {\n    private val innerSpacing = innerSpace.coerceIn(0..(squareSize / 2))\n\n    override fun renderSquare(\n        colorFn: QRCodeColorFunction,\n        square: QRCodeSquare,\n        squareCanvas: QRCodeGraphics,\n        canvas: QRCodeGraphics,\n        qrCode: QRCode,\n    ) {\n        val bg = colorFn.bg(square.row, square.col, qrCode, canvas)\n        val fg = colorFn.fg(square.row, square.col, qrCode, canvas)\n\n        squareCanvas.fill(bg)\n\n        if (square.dark) {\n            fillRect(\n                innerSpacing,\n                innerSpacing,\n                squareSize - innerSpacing * 2,\n                squareSize - innerSpacing * 2,\n                fg,\n                squareCanvas,\n            )\n        }\n    }\n\n    override fun renderControlSquare(\n        colorFn: QRCodeColorFunction,\n        square: QRCodeSquare,\n        squareCanvas: QRCodeGraphics,\n        canvas: QRCodeGraphics,\n        qrCode: QRCode,\n    ) {\n        val bg = colorFn.bg(square.row, square.col, qrCode, canvas)\n        val fg = colorFn.fg(square.row, square.col, qrCode, canvas)\n        val size = squareSize * square.rowSize\n        val startX = square.absoluteX(squareSize)\n        val startY = square.absoluteY(squareSize)\n\n        when (square.squareInfo.type) {\n            POSITION_PROBE -> {\n                val margin = colorFn.margin(square.row, square.col, qrCode, canvas)\n\n                // Fill the area of the whole square\n                canvas.fillRect(startX, startY, size + squareSize * 2, size + squareSize * 2, margin)\n\n                // Draw outer square\n                drawRect(\n                    startX + squareSize + innerSpacing,\n                    startY + squareSize + innerSpacing,\n                    size - innerSpacing * 2,\n                    size - innerSpacing * 2,\n                    fg,\n                    squareSize.toDouble(),\n                    canvas,\n                )\n\n                // Draw inner square\n                fillRect(\n                    startX + squareSize + squareSize * 2,\n                    startY + squareSize + squareSize * 2,\n                    size - squareSize * 4,\n                    size - squareSize * 4,\n                    fg,\n                    canvas,\n                )\n            }\n\n            else -> {\n                // Always a 5x5 square at (x, y)\n                canvas.fillRect(startX, startY, size, size, bg)\n\n                // 1st line\n                drawSquaresLine(startX, startY, 5, 1, fg, canvas)\n\n                // 2nd line\n                drawSquaresLine(startX, startY + squareSize, 5, 4, fg, canvas)\n\n                // 3rd line\n                drawSquaresLine(startX, startY + squareSize * 2, 5, 2, fg, canvas)\n\n                // 4th line\n                drawSquaresLine(startX, startY + squareSize * 3, 5, 4, fg, canvas)\n\n                // 5th line\n                drawSquaresLine(startX, startY + squareSize * 4, 5, 1, fg, canvas)\n            }\n        }\n    }\n\n    private fun drawSquaresLine(x: Int, y: Int, amount: Int, skip: Int, color: Int, canvas: QRCodeGraphics) {\n        for (i in 0 until amount step skip) {\n            fillRect(\n                x + (squareSize * i) + innerSpacing,\n                y + innerSpacing,\n                squareSize - innerSpacing * 2,\n                squareSize - innerSpacing * 2,\n                color,\n                canvas,\n            )\n        }\n    }\n\n    /**\n     * The function to actually draw a filled cell. Extend this to easily create your own shape :)\n     *\n     * Used to draw ALL cells of the QRCode except the outline of the larger ones on the edges.\n     */\n    open fun fillRect(x: Int, y: Int, width: Int, height: Int, color: Int, canvas: QRCodeGraphics) {\n        canvas.fillRect(x, y, width, height, color)\n    }\n\n    /**\n     * The function to actually draw the outline of a cell. Extend this to easily create your own shape :)\n     *\n     * ONLY used to draw those larger squares on the edges of the QRCode.\n     */\n    open fun drawRect(x: Int, y: Int, width: Int, height: Int, color: Int, thickness: Double, canvas: QRCodeGraphics) {\n        canvas.drawRect(x, y, width, height, color, thickness)\n    }\n}\n","package qrcode.shape\n\nimport qrcode.raw.QRCodeProcessor.Companion.DEFAULT_CELL_SIZE\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.roundToInt\n\n/**\n * Creates \"rounded squares\" as the shapes on the QRCode.\n *\n * By default, the value is set to `squareSize / 4`\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"NON_EXPORTABLE_TYPE\")\nopen class RoundSquaresShapeFunction @JvmOverloads constructor(\n    squareSize: Int = DEFAULT_CELL_SIZE,\n    private val radius: Int = defaultRadius(squareSize),\n    innerSpace: Int = defaultInnerSpace(squareSize)\n) : DefaultShapeFunction(squareSize, innerSpace) {\n    companion object {\n        fun defaultRadius(squareSize: Int) = (squareSize / 1.75).roundToInt()\n        fun defaultInnerSpace(squareSize: Int) = (squareSize * 0.05).roundToInt()\n    }\n\n    override fun fillRect(x: Int, y: Int, width: Int, height: Int, color: Int, canvas: QRCodeGraphics) {\n        canvas.fillRoundRect(x, y, width, height, radius, color)\n    }\n\n    override fun drawRect(x: Int, y: Int, width: Int, height: Int, color: Int, thickness: Double, canvas: QRCodeGraphics) {\n        canvas.drawRoundRect(x, y, width, height, radius, color, thickness)\n    }\n}\n","package qrcode.render\n\nimport kotlinx.browser.document\nimport org.khronos.webgl.Uint8ClampedArray\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.ImageData\nimport org.w3c.files.Blob\n\n@JsExport\n@OptIn(ExperimentalJsExport::class)\n@Suppress(\"MemberVisibilityCanBePrivate\")\nactual open class QRCodeGraphics actual constructor(\n    val width: Int,\n    val height: Int\n) {\n    companion object {\n        private const val CANVAS_UNSUPPORTED = \"Canvas seems to not be supported :(\"\n        private const val FULL_CIRCLE = 3.141592653589793 * 2.0 // 2 * PI = Full circle\n    }\n\n    private val canvas: HTMLCanvasElement\n    private val context: CanvasRenderingContext2D\n    private var changed: Boolean = false\n\n    init {\n        val canvas = tryGet { document.createElement(\"canvas\") as HTMLCanvasElement }\n\n        canvas.width = width\n        canvas.height = height\n\n        val context = tryGet { canvas.getContext(\"2d\") as CanvasRenderingContext2D }\n\n        this.canvas = canvas\n        this.context = context\n    }\n\n    private fun rgba(color: Int): String {\n        val r = (color shr 16) and 0xFF\n        val g = (color shr 8) and 0xFF\n        val b = (color shr 0) and 0xFF\n        val a = ((color shr 24) and 0xFF) / 255.0\n        return \"rgba($r,$g,$b,$a)\"\n    }\n\n    private fun draw(color: Int, action: () -> Unit) {\n        changed = true\n        val colorString = rgba(color)\n        context.fillStyle = colorString\n        context.strokeStyle = colorString\n        val lineWidth = context.lineWidth\n\n        action()\n\n        context.lineWidth = lineWidth\n    }\n\n    /** Returns `true` if **any** drawing was performed */\n    actual open fun changed() = changed\n\n    /** Simply changes the `changed` flag to true without doing anything else */\n    actual fun reset() {\n        if (changed) {\n            changed = false\n            context.clearRect(0.0, 0.0, width.toDouble(), height.toDouble())\n        }\n    }\n\n    /** Return the dimensions of this Graphics object as a pair of `width, height` */\n    actual open fun dimensions() = arrayOf(width, height)\n\n    /**\n     * Returns a Data URL to this can be shown in an `<img/>` tag.\n     */\n    open fun toDataURL(format: String = \"png\"): String = canvas.toDataURL(format)\n\n    /**\n     * Direct access to the `.toBlob()` function of the underlying canvas.\n     *\n     * Syntactic sugar for `nativeImage().toBlob(callback)`.\n     */\n    open fun toBlob(callback: (Blob?) -> Unit): Unit = canvas.toBlob(callback)\n\n    /** Returns this image as a [ByteArray] encoded as PNG. */\n    actual open fun getBytes(): ByteArray = getBytes(\"png\")\n\n    /** Returns this image as a [ByteArray] encoded as the specified format (e.g. `PNG`, `JPG`, `BMP`, ...). */\n    @JsName(\"getBytesForFormat\")\n    actual open fun getBytes(format: String): ByteArray =\n        canvas.toDataURL(format).encodeToByteArray()\n\n    /** Returns the available formats to be passed as parameters to [getBytes].\n     *\n     * **Note:** The actual list of supported formats depends on the browser, so this won't be checked. PNG is always supported.\n     */\n    actual open fun availableFormats(): Array<String> = arrayOf(\"png\")\n\n    /** Returns the native image object this QRCodeGraphics is working upon. */\n    actual open fun nativeImage(): Any = canvas\n\n    /** Draw a straight line from point `(x1,y1)` to `(x2,y2)`. */\n    actual open fun drawLine(x1: Int, y1: Int, x2: Int, y2: Int, color: Int, thickness: Double) {\n        draw(color) {\n            context.moveTo(x1.toDouble(), y1.toDouble())\n            context.lineTo(x2.toDouble(), y2.toDouble())\n        }\n    }\n\n    /** Draw the edges of a rectangle starting at point `(x,y)` and having `width` by `height`. */\n    actual open fun drawRect(x: Int, y: Int, width: Int, height: Int, color: Int, thickness: Double) {\n        draw(color) {\n            context.lineWidth = thickness\n            context.strokeRect(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())\n        }\n    }\n\n    /** Fills the rectangle starting at point `(x,y)` and having `width` by `height`. */\n    actual open fun fillRect(x: Int, y: Int, width: Int, height: Int, color: Int) {\n        draw(color) {\n            context.fillRect(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())\n        }\n    }\n\n    /** Fill the whole area of this canvas with the specified [color]. */\n    actual open fun fill(color: Int) {\n        fillRect(0, 0, width, height, color)\n    }\n\n    /**\n     * Draw the edges of a round rectangle starting at point `(x,y)` and having `width` by `height`\n     * with edges that are `borderRadius` pixels round (almost like CSS).\n     *\n     * If it helps, these would _in theory_ draw the same thing:\n     *\n     * ```\n     * // CSS\n     * .roundRect {\n     *     width: 100px;\n     *     height: 100px;\n     *     border-radius: 5px;\n     * }\n     *\n     * // Kotlin\n     * drawRoundRect(0, 0, 100, 100, 5)\n     * ```\n     *\n     * **Note:** you can't specify different sizes for different edges. This is just an example :)\n     *\n     */\n    actual open fun drawRoundRect(\n        x: Int,\n        y: Int,\n        width: Int,\n        height: Int,\n        borderRadius: Int,\n        color: Int,\n        thickness: Double\n    ) {\n        drawRect(x, y, width, height, color, 1.0)\n    }\n\n    /**\n     * Fills the round rectangle starting at point `(x,y)` and having `width` by `height`\n     * with edges that are `borderRadius` pixels round (almost like CSS).\n     *\n     * If it helps, these would _in theory_ draw the same thing:\n     *\n     * ```\n     * // CSS\n     * .roundRect {\n     *     width: 100px;\n     *     height: 100px;\n     *     border-radius: 5px;\n     * }\n     *\n     * // Kotlin\n     * drawRoundRect(0, 0, 100, 100, 5)\n     * ```\n     *\n     * **Note:** you can't specify different sizes for different edges. This is just an example :)\n     *\n     */\n    actual open fun fillRoundRect(\n        x: Int,\n        y: Int,\n        width: Int,\n        height: Int,\n        borderRadius: Int,\n        color: Int\n    ) {\n        fillRect(x, y, width, height, color)\n    }\n\n    /** Draw an image inside another. Mostly used to merge squares into the main QRCode. */\n    actual open fun drawImage(img: QRCodeGraphics, x: Int, y: Int) {\n        draw (0) {\n            context.drawImage(img.canvas, x.toDouble(), y.toDouble())\n        }\n    }\n\n    private fun <T> tryGet(what: () -> T): T =\n        try {\n            what()\n        } catch (t: Throwable) {\n            throw Error(CANVAS_UNSUPPORTED, cause = t)\n        }\n\n    /**\n     * Draw the edges of an ellipse (aka \"a circle\") which occupies the area `(x,y,width,height)`\n     */\n    actual fun drawEllipse(x: Int, y: Int, width: Int, height: Int, color: Int, thickness: Double) {\n        draw(color) {\n            val radiusX = width.toDouble() / 2.0\n            val radiusY = height.toDouble() / 2.0\n\n            context.lineWidth = thickness\n            context.beginPath()\n            context.ellipse(radiusX + x.toDouble(), radiusY + y.toDouble(), radiusX, radiusY, 0.0, 0.0, FULL_CIRCLE, false)\n            context.stroke()\n        }\n    }\n\n    /**\n     * Fills an ellipse (aka \"a circle\") which occupies the area `(x,y,width,height)`\n     *\n     */\n    actual fun fillEllipse(x: Int, y: Int, width: Int, height: Int, color: Int) {\n        draw(color) {\n            val radiusX = width.toDouble() / 2.0\n            val radiusY = height.toDouble() / 2.0\n\n            context.beginPath()\n            context.ellipse(radiusX + x.toDouble(), radiusY + y.toDouble(), radiusX, radiusY, 0.0, 0.0, FULL_CIRCLE, false)\n            context.fill()\n        }\n    }\n\n    /**\n     * Reads the specified image from [rawData] and draws it at `(x,y)`.\n     *\n     * On JS this has a limitation that the [rawData] image will be loaded considering it has the same [width] as\n     * this object.\n     */\n    @JsName(\"drawImageFromBytes\")\n    actual fun drawImage(rawData: ByteArray, x: Int, y: Int) {\n        draw(0) {\n            val imageData = ImageData(Uint8ClampedArray(rawData.toTypedArray()), width)\n            context.putImageData(imageData, x.toDouble(), y.toDouble())\n        }\n    }\n}\n",null,null,null,null,null,"package qrcode.shape\n\nimport qrcode.QRCode\nimport qrcode.color.QRCodeColorFunction\nimport qrcode.internals.QRCodeSquare\nimport qrcode.render.QRCodeGraphics\nimport kotlin.js.ExperimentalJsExport\nimport kotlin.js.JsExport\n\n/**\n * Function to render (draw) a single square.\n */\n@JsExport\n@OptIn(ExperimentalJsExport::class)\ninterface QRCodeShapeFunction {\n    /**\n     * Called before rendering starts, to setup something if needed\n     */\n    fun beforeRender(qrCode: QRCode, qrCodeGraphics: QRCodeGraphics) {\n        // Do nothing\n    }\n\n    /**\n     * Renders a single square.\n     */\n    fun renderSquare(\n        colorFn: QRCodeColorFunction,\n        square: QRCodeSquare,\n        squareCanvas: QRCodeGraphics,\n        canvas: QRCodeGraphics,\n        qrCode: QRCode,\n    )\n\n    /**\n     * Renders a control square (those bigger ones on the edges).\n     */\n    fun renderControlSquare(\n        colorFn: QRCodeColorFunction,\n        square: QRCodeSquare,\n        squareCanvas: QRCodeGraphics,\n        canvas: QRCodeGraphics,\n        qrCode: QRCode,\n    )\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(359);\n"],"names":["root","factory","exports","module","define","amd","this","log","LN2","a","value","O","len","relativeStart","k","end","relativeEnd","finalValue","TypedArray","x","asUint","b","square","qrCode","qrCodeGraphics","squareInfo","type","margin","row","col","dark","fg","bg","<this>","collection","destination","iterator","index","element","item","elements","initialCapacity","capacity","fromIndex","toIndex","newSize","source","defaultValue","result","map","HashSet_init_$Init$","loadFactor","computeHashSize","computeShift","hashSize","InternalHashMap_init_$Init$","<get-capacity>","<get-hashSize>","registerModification","ensureExtraCapacity","n","shouldCompact","extraCapacity","spareCapacity","gaps","ensureCapacity","minCapacity","newHashSize","hash","key","rehash","compact","i","j","valuesArray","putRehash","probesLeft","findKey","keysArray","presenceArray","hashArray","maxProbeDistance","length","LinkedHashSet_init_$Init$","jClass","givenSimpleName","isInstanceFunction","it","jClasses","metadata","kClass","e","constructor","message","StringBuilder_init_$Init$","content","uppercase","char","radix","ch","diff","array","needle","bottom","top","middle","pattern","options","string","startIndex","endIndex","throwOnMalformed","bytes","byteIndex","charIndex","code","codePoint","<init>","other","ignoreCase","n1","n2","min","thisChar","otherChar","high","low","size","separator","prefix","postfix","limit","truncated","transform","buffer","count","minimumValue","range","step","isPositive","name","ordinal","interfaces","maxSize","masks","currentSize","imask","iid","iidImask","numberIndex","intArray","numberWithSettledBit","activeBit","mask","initValue","obj","ia","descriptor","o","typeOf","shiftNumber","MASK","bigNumber","hashCode","signum","chunk","hashCodeMap","symbol","cachedHashCode","str","obj1","obj2","instance","constructorFunction","getter","setter","proto","this_","cause","errorInfo","v","msg","src","dst","srcLen","dstLen","arr","thisNeg","otherNeg","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","numBits","res","rem","approxDouble","approx2","log2","delta","approxRes","approxRem","radixLong","div","digitsPerTime","radixToPower","remDiv","digits","twoPwr32","defaultConstructor","associatedObjectKey","associatedObjects","suspendArity","kind","ctor","metadataConstructor","parent","start","endInclusive","iface","possibleActiveBit","parentProto","propName","Exception_init_$Init$","IllegalArgumentException_init_$Init$","UnsupportedOperationException_init_$Init$","RuntimeException_init_$Init$","NoSuchElementException_init_$Init$","ConcurrentModificationException_init_$Init$","NullPointerException_init_$Init$","NoWhenBranchMatchedException_init_$Init$","ClassCastException_init_$Init$","c","mod","first","last","isNegative","firstChar","limitForMaxRadix","limitBeforeMul","digit","input","$this$null","draw","rawData","canvas","qrCodeProcessor","renderShaded","squareSize","$canvas","currentSquare","currentCanvas","actualSquare","rendered","shapeFn","renderControlSquare","colorFn","renderSquare","data","graphicsFactory","doBefore","doAfter","DefaultColorFunction","DefaultShapeFunction","QRCodeGraphicsFactory","QRCodeProcessor","coerceAtLeast","typeForDataAndECL","encode","typeNum","innerSpace","<get-beforeFn>","<get-afterFn>","shape","customShapeFunction","defaultRadius","foreground","background","startForegroundColor","endForegroundColor","backgroundColor","vertical","getRGBA","lengthInBits","num","shift","offset","arraycopy","from","fromPos","to","toPos","isInsideModules","rowOffset","colOffset","modulesSize","isTopBottomRowSquare","probeSize","isLeftRightColSquare","isMidSquare","findSquareRegion","set$default","modules","set","qrCodeSquare","QRCodeSquare","moduleSize","rowSize","colSize","QRCodeSquareInfo","region","dataType","QRData","encodeToByteArray","charCode","getBCHDigit","totalCount","dataCount","maxTypeNum","createData","rsBlocks","getRSBlocks","BitBuffer","put","getLengthInBits","write","sum","totalDataCount","createBytes","maxDcCount","maxEcCount","totalCodeCount","dcData","ecData","dcCount","ecCount","rsPoly","getErrorCorrectPolynomial","modPoly","Polynomial","ecDataSize","modIndex","r","errorCorrectionLevel","getDataType","QRNumber","QRAlphaNum","QR8BitByte","defaultInnerSpace","RoundSquaresShapeFunction","drawSquaresLine","y","amount","skip","color","fillRect","coerceIn","radius","action","colorString","rgba","lineWidth","tryGet","what","t","document","createElement","width","height","context","getContext","CharacterCodingException_init_$Init$","IndexOutOfBoundsException_init_$Init$","IllegalStateException_init_$Init$","Error_init_$Init$","NumberFormatException_init_$Init$","sb","addKey","tentativeMaxProbeDistance","maximumValue","probeDistance","putIndex","allocateValuesArray","curValuesArray","newValuesArray","oldValue","contentEquals","entry","arity","$arity","match","l","oldCapacity","newCapacity","rangeStart","rangeEnd","QRCodeBuilder","<set-?>","newGraphicsSquare","computedSize","beforeRender","format","renderToGraphics","withInnerSpacing","bgColor","startColor","endColor","innerSpacing","logo","clearLogoArea","$width","$height","logoX","logoY","cellX","absoluteX","cellY","absoluteY","rectsIntersect","$logo","QRCode","<get-colorFunction>","LinearGradientColorFunction","<get-shapeFunction>","CircleShapeFunction","toInt","g","alpha","pct","roundToInt","bit","copyOf","toString","gexp","glog","ratio","setupPositionProbePattern","squareData","isDark","pos","getPatternPosition","moduleCount","maskPattern","bits","getBCHTypeInfo","getBCHTypeNumber","inc","bitIndex","getMask","cellSize","dataLength","x1","y1","w1","h1","x2","y2","w2","h2","x1End","x2End","y1End","y2End","typeNumber","errorCorrectLength","multiply","s","isAlphaNum","isNumber","d","rsBlock","block","RSBlock","blocksSize","firstBlock","secondBlock","qrCodeData","getMaxLength","computeImageSize","brightColor","darkColor","marginColor","$darkColor","$brightColor","$marginColor","cellData","graphics","fill","renderer","squareCanvas","changed","drawImage","reset","setupTopLeftPositionProbePattern","setupTopRightPositionProbePattern","setupBottomLeftPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","applyMaskPattern","newGraphics","QRCodeGraphics","startX","startY","drawRect","thickness","fillRoundRect","drawRoundRect","clearRect","toDataURL","callback","toBlob","$x1","$y1","$x2","$y2","moveTo","lineTo","$thickness","$x","$y","strokeRect","borderRadius","img","$img","radiusX","radiusY","beginPath","ellipse","stroke","$rawData","imageData","ImageData","Uint8ClampedArray","putImageData","m","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}